#!/bin/bash
#===================================================================================
#
# FILE: pulllivecopyfromdatadump
#
# USAGE: pulllivecopyfromdatadump -p [project type] -d [datetime stamp]
#
# DESCRIPTION: This will create a livecopy site from a data dump.
#
# OPTIONS: see function ’usage’ below
# NOTES: ---
# AUTHOR: Kevin Bailey, kbailey@freewayprojects.com
# COMPANY: Freeway Projects Limited
#===================================================================================

# Make sure only one Pullpush script is running at any one time.
touch /var/lock/pullpush
chmod --quiet 666 /var/lock/pullpush
exec 9>/var/lock/pullpush
if ! flock -n 9  ; then
   echo "Another Pullpush script is currently running - try again later.";
   exit 1
fi

# -------------------------------------------------------------------------------------------------
# Set up global variables.
#
# We are going to explicitly set the script name variable.  Obviously the script name is available
# as $0 - but this is not consistent and may or may not contain the path.  Also, this means we can
# use the bash debugger without needing to handle the fact that $0 would contain something like
# 'bashdb'.
# -------------------------------------------------------------------------------------------------
SCRIPT_NAME=pulllivecopyfromdatadump
DATE_TIME=$(date +%Y%m%d-%H%M%S)

# -------------------------------------------------------------------------------------------------
# Set up the user to be able to run sudo commands - this will be revoked at the end of the script.
# -------------------------------------------------------------------------------------------------
sudo -v

# -------------------------------------------------------------------------------------------------
# Log all output from the script.
# 
# As we are going to be carrying out multiple steps and it is important we can see all the output
# to be able to diagnose problems.
# -------------------------------------------------------------------------------------------------

# Create a place for the log files.
sudo mkdir -p /var/log/pullpush
sudo chmod 777 /var/log/pullpush

# Create a pipe...
tmppipe=$(mktemp -u)
mkfifo ${tmppipe}

# ...then start a tee process which takes as its input the pipe - and output to the logfile (and 
# standard output) and then push the tee process into the background (subshell).
tee < ${tmppipe} /var/log/pullpush/${DATE_TIME}_${USER}_${SCRIPT_NAME}.log &

# Redirect both standard output and standard error to the pipe just created - these outputs
# will then be directed via the pipe to standard output (the current shell) and the log file.
exec &> ${tmppipe}

# This sets up the pipe to be removed - it will only be fully dropped when no process is using it.
rm ${tmppipe}

# -------------------------------------------------------------------------------------------------
# Import Pullpush functions.
# -------------------------------------------------------------------------------------------------
source /usr/local/share/pullpush/pullpush_functions

# -------------------------------------------------------------------------------------------------
# Local functions
#
# Here we will define all the functions used by this script.
# -------------------------------------------------------------------------------------------------

# Output a usage message - used when the parameters input are not correct.
usage () {
    echo "Usage: $SCRIPT_NAME -p [project name] -d [datetime stamp]"
}

# -------------------------------------------------------------------------------------------------
# Testing parameters
# -------------------------------------------------------------------------------------------------
while getopts ":p:d:" opt; do
    case $opt in
	p)
	    PROJECT_NAME=$OPTARG
	    ;;
	d)
	    DATETIME_STAMP=$OPTARG
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	    exit 1
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    exit 1
	    ;;
    esac
done

# Check the parameter has had a value assigned.
if [ -z $PROJECT_NAME ]
then
    echo "The project name needs to be set."
    usage
    exit 1
fi

# Check the project exists.
if [ ! -e /home/beta/projects/${PROJECT_NAME}/web ]
then
    echo "The project does not appear to exist."
    usage
    exit 1
fi

# Check the parameter has had a value assigned.
if [ -z $DATETIME_STAMP ]
then
    echo "The datetime stamp needs to be set."
    usage
    exit 1
fi

# Check the data dump files exist.
if [ ! -e /home/livecopy/data_dumps/${PROJECT_NAME}_${DATETIME_STAMP}.sql ] || [ ! -e /home/livecopy/data_dumps/${PROJECT_NAME}_${DATETIME_STAMP}.tar ]
then
    echo "One of the data dump files is missing."
    echo "The script is expecting to be able to read the files /home/livecopy/data_dumps/${PROJECT_NAME}_${DATETIME_STAMP}.sql and /home/livecopy/data_dumps/${PROJECT_NAME}_${DATETIME_STAMP}.tar"

    usage
    exit 1
fi

# Load the project settings file or display an error if it does not exist.
if [ -e /etc/pullpush/projects/${PROJECT_NAME}.conf ]
then
    source /etc/pullpush/projects/${PROJECT_NAME}.conf
else
    echo "ERROR - The project settings file /etc/pullpush/projects/${PROJECT_NAME}.conf not found."
    exit 1
fi

# Load the configuration file and check it was loaded OK.
__load_configuration_file

if [ $? -ne 0 ]
then
    echo "Configuration file was not loaded."
fi

echo "All tests completed OK."
echo "Project name: ${PROJECT_NAME}"

# -------------------------------------------------------------------------------------------------
# The plan.
#
# If necessary create the vhost and database.
# Load the database from the db dump.
# Remove any existing files.
# Extract the site files from the data dump.
# Append the database connection settings to the settings.php file.
# -------------------------------------------------------------------------------------------------

# Set up the database and database user.
DATABASE_NAME=livecopypr${PROJECT_NAME}
DATABASE_USER=livecopypr${PROJECT_NAME}
DATABASE_PASSWORD=`cat /dev/urandom | base64 | tr -d '[:punct:]' | tr -d '[:digit:]' | tr -d '[:upper:]' | cut -c1-10 | head -1`

# If necessary create the database - if not then update the user. 
if [ ! -e /home/livecopy/projects/${PROJECT_NAME}/web ]
then

    echo "Setting up the vhost..."
    __set_up_vhost livecopy-pr-${PROJECT_NAME} /home/livecopy/projects/${PROJECT_NAME}/web

    echo "Creating database..."
    __create_mysql_database_and_user_account ${DATABASE_NAME} ${DATABASE_USER} ${DATABASE_PASSWORD}
else

    # Here we are going to update the privileges so we have the password in this script and we can add it to the settings file.  
    # Also, it is a good idea to refresh the password to prevent connecting to the wrong database.
    echo "Updating database user..."
    mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
fi

# Load the DB from the backup.
mysql livecopypr${PROJECT_NAME} < /home/livecopy/data_dumps/${PROJECT_NAME}_${DATETIME_STAMP}.sql

# Remove the exsiting site files.
sudo -u livecopy rm -rf /home/livecopy/projects/${PROJECT_NAME}/web
sudo -u livecopy -i mkdir -p /home/livecopy/projects/${PROJECT_NAME}/web
sudo -u livecopy -i tar -x --file=/home/livecopy/data_dumps/${PROJECT_NAME}_${DATETIME_STAMP}.tar --directory=/home/livecopy/projects/${PROJECT_NAME}/web --strip-components=1

# Update the settings file.
case "${PROJECT_TYPE}" in

    drupal7)

	# We will copy the file before changing it as changing it in place gets complicated when trying to excape the sudo command.
	cp /home/livecopy/projects/${PROJECT_NAME}/web/sites/default/settings.php /home/${USER}/settings.php.livecopypr${PROJECT_NAME}
	cat <<EOFSETTINGS >> /home/${USER}/settings.php.livecopypr${PROJECT_NAME}

\$databases = array (
  'default' => 
  array (
    'default' => 
    array (
      'database' => '${DATABASE_NAME}',
      'username' => '${DATABASE_USER}',
      'password' => '${DATABASE_PASSWORD}',
      'host' => 'localhost',
      'port' => '',
      'driver' => 'mysql',
      'prefix' => '',
    ),
  ),
);

EOFSETTINGS

	sudo -u livecopy -i cp /home/${USER}/settings.php.livecopypr${PROJECT_NAME} /home/livecopy/projects/${PROJECT_NAME}/web/sites/default/settings.php
	rm /home/${USER}/settings.php.livecopypr${PROJECT_NAME}
	;;

    drupal6)

	# We will copy the file before changing it as changing it in place gets complicated when trying to excape the sudo command.
	cp /home/livecopy/projects/${PROJECT_NAME}/web/sites/default/settings.php /home/${USER}/settings.php.livecopypr${PROJECT_NAME}
	echo "\$db_url = 'mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME}';" >> /home/${USER}/settings.php.livecopypr${PROJECT_NAME}
	sudo -u livecopy -i cp /home/${USER}/settings.php.livecopypr${PROJECT_NAME} /home/livecopy/projects/${PROJECT_NAME}/web/sites/default/settings.php
	rm /home/${USER}/settings.php.livecopypr${PROJECT_NAME}
	;;

    *)
        echo "Error - Invalid project type."
        exit -1
esac

# Clear out any caches - this may be needed as the site is now in a different location.
case "${PROJECT_TYPE}" in

    drupal7|drupal6)
	drush --root=/home/livecopy/projects/${PROJECT_NAME}/web cache-clear all
        ;;

    *)
        echo "Error - Invalid project type."
        exit 1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished - the live copy of the site is at http://livecopy-pr-${PROJECT_NAME}.${SERVER_FQDN}"
# -------------------------------------------------------------------------------------------------

exit 0




exit 0










# pulllivecopyfromdatadump
# Pull live copy from data dump

# ------------------------------------------------------------------------------------------------
# Script which will create a new livecopy application using a data dump from the live application.
# ------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
# Logging setup
# -------------------------------------------------------------------------------------------------

# These lines have been copied from http://stackoverflow.com/questions/3173131/redirect-copy-of-stdout-to-log-file-from-within-bash-script-itself
# and will send the script output to a log file.
mkdir -p ~/logs/pullpush
DATE_TIME=`date +%Y%m%d-%H%M%S`
logfile=~/logs/pullpush/pulllivecopyfromdatadump_${DATE_TIME}.log
mkfifo ${logfile}.pipe
tee < ${logfile}.pipe $logfile &
exec &> ${logfile}.pipe
rm ${logfile}.pipe

# -------------------------------------------------------------------------------------------------
# Testing for arguments and configuration files.
# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Testing for argument which should be the project name..."
if [ $1 ]
then
    echo "Argument supplied OK as $1"
    echo
else
    echo "ERROR - No argument supplied"
    exit -1
fi

echo
echo `date`
echo "Testing for argument which should be the datatime stamp..."
if [ $2 ]
then
    echo "Argument supplied OK as $2"
    echo
else
    echo "ERROR - No argument supplied"
    exit -1
fi

# Set up variables used through this script.
PROJECT_NAME=${1}
DATADUMP_DATETIME_STAMP=${2}
DATE_TIME=`date +%Y%m%d-%H%M%S`

# Check the Pullpush configuration file exists.
if [ -e /etc/pullpush/pullpush.conf ]
then
    source /etc/pullpush/pullpush.conf
else
    echo
    echo "ERROR - Pullpush configuration file not found."
    exit -1
fi

# Check the project settings file exists.
if [ -e /etc/pullpush/projects/${PROJECT_NAME}.conf ]
then
    source /etc/pullpush/projects/${PROJECT_NAME}.conf
else
    echo "ERROR - The configuration file /etc/pullpush/projects/${PROJECT_NAME}.conf not found."
    exit -1
fi


# ----------------------------------------------------------------------
# If the livecopy has not already been set up then we need to create it.
# ----------------------------------------------------------------------
if [ ! -e /home/livecopy/web/${PROJECT_NAME} ]
then

# Here we will add the vhost.

    case "${SERVER_TYPE}" in

	debian)
	    echo
	    echo `date`
            echo "Set up vhost on Debian."

	# First we need to copy the relevant vhost template file.
	    case ${PROJECT_TYPE} in
		drupal7)
		    echo "Copy the drupal7 vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_drupal7.template /etc/apache2/sites-available/livecopy-${PROJECT_NAME}
                    ;;
		drupal6)
		    echo "Copy the drupal6 vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_drupal6.template /etc/apache2/sites-available/livecopy-${PROJECT_NAME}
                    ;;
		symfonymysql)
		    echo "Copy the symfonymysql vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_symfonymysql.template /etc/apache2/sites-available/livecopy-${PROJECT_NAME}
                    ;;
		phpmysql)
		    echo "Copy the phpmysql vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_phpmysql.template /etc/apache2/sites-available/livecopy-${PROJECT_NAME}
                    ;;
		*)
		    echo "Error - Invalid project type when adding a Debian vhost."
		    exit -1
            esac

        # Here we will update the vhost files as necessary.  There may be a more elegant way of doing this. 

            sudo sed -i "s/documentroot/\/home\/livecopy\/web\/${PROJECT_NAME}/g" /etc/apache2/sites-available/livecopy-${PROJECT_NAME}
            sudo sed -i "s/username/livecopy/g" /etc/apache2/sites-available/livecopy-${PROJECT_NAME}
            sudo sed -i "s/vhostname/livecopy-${PROJECT_NAME}/g" /etc/apache2/sites-available/livecopy-${PROJECT_NAME}
            sudo sed -i "s/serverfqdn/${SERVER_FQDN}/g" /etc/apache2/sites-available/livecopy-${PROJECT_NAME}
            sudo sed -i "s/serveradminemail/${SERVER_ADMIN_EMAIL}/g" /etc/apache2/sites-available/livecopy-${PROJECT_NAME}

            sudo a2ensite livecopy-${PROJECT_NAME}
            sudo apache2ctl restart
            ;;
	
	sles)
	    echo
	    echo `date`
            echo "Set up a vhost on SLES."

	    case ${PROJECT_TYPE} in
		drupal7)
		    echo "Copy the drupal7 vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_drupal7.template /etc/apache2/vhosts.d/livecopy-${PROJECT_NAME}.conf
                    ;;
		drupal6)
		    echo "Copy the drupal6 vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_drupal6.template /etc/apache2/vhosts.d/livecopy-${PROJECT_NAME}.conf
                    ;;
		symfonymysql)
		    echo "Copy the symfonymysql vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_symfonymysql.template /etc/apache2/vhosts.d/livecopy-${PROJECT_NAME}.conf
                    ;;
		phpmysql)
		    echo "Copy the phpmysql vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_phpmysql.template /etc/apache2/vhosts.d/livecopy-${PROJECT_NAME}.conf
                    ;;
		*)
		    echo "Error - Invalid project type when adding a SLES vhost."
		    exit -1
            esac

            sudo sed -i "s/documentroot/\/home\/livecopy\/web\/${PROJECT_NAME}/g" /etc/apache2/vhosts.d/livecopy-${PROJECT_NAME}.conf

            sudo sed -i "s/username/livecopy/g" /etc/apache2/vhosts.d/livecopy-${PROJECT_NAME}.conf
            sudo sed -i "s/vhostname/livecopy-${PROJECT_NAME}/g" /etc/apache2/sites-available/livecopy-${PROJECT_NAME}.conf
            sudo sed -i "s/serverfqdn/${SERVER_FQDN}/g" /etc/apache2/vhosts.d/livecopy-${PROJECT_NAME}.conf
            sudo sed -i "s/serveradminemail/${SERVER_ADMIN_EMAIL}/g" /etc/apache2/vhosts.d/livecopy-${PROJECT_NAME}.conf

            sudo /usr/sbin/rcapache2 restart
            ;;

	*)
            echo "Error - Invalid server type when adding a vhost."
            exit -1
    esac



## Here we will create the database username and password.

# Should possibly use a better tool to generate usernames and passwords - but SLES does not have gpw or pwgen available.
# NB - We need to generate a shortish username to log in to the database as MySQL
# has a limit on database usernames of 16 characters.
# NB - It would be good to put hyphens inbetween the parts of the database name but 
# this causes problems with MySQL.
    DATABASE_NAME=livecopy${PROJECT_NAME}
    DATABASE_USER=`cat /dev/urandom | base64 | tr -d '[:punct:]' | tr -d '[:digit:]' | tr -d '[:upper:]' | cut -c1-10 | head -1`
    DATABASE_PASSWORD=`cat /dev/urandom | base64 | tr -d '[:punct:]' | tr -d '[:digit:]' | tr -d '[:upper:]' | cut -c1-10 | head -1`

# -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Create the database for the dev copy of the site..."
# -------------------------------------------------------------------------------------------------
# We will create a database for the Drupal site.  Then, we need to allow the user full access to this database as standard 
# privileges required by Drupal do not seem to allow us the create the initial tables.  We will then change privileges
# to only those needed for Drupal.
    case "${PROJECT_TYPE}" in

	drupal7)
            echo
	    echo `date`
	    echo "This will set up a database for a Drupal 7 site."

        # NB - It is possible to run the 'drush site-install' command and specify the root user for MySQL - but this would expose the
        # MYSQL root user and password to anyone who can read this script - and this might include user accounts which are not in the 
        # wheel group.
	    sudo mysqladmin create ${DATABASE_NAME}
	    sudo mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
            ;;

	drupal6)
            echo
	    echo `date`
	    echo "Setting up a database for a Drupal 6 site..."

        # NB - It is possible to run the 'drush site-install' command and specify the root user for MySQL - but this would expose the
        # MYSQL root user and password to anyone who can read this script - and this might include user accounts which are not in the 
        # wheel group.
	    sudo mysqladmin create ${DATABASE_NAME}
	    sudo mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
            ;;

	symfonymysql)
            echo
	    echo `date`
	    echo "Setting up a database for a symfonymysql site..."

        # Although Symfony does not need a database we will set one up for this project type for the convenience of the developers.
	    sudo mysqladmin create ${DATABASE_NAME}
	    sudo mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
	    echo 
	    echo `date`
	    echo "This is the database name: "
	    echo ${DATABASE_NAME}
	    echo "This is the database user which should be used to access the database: "
	    echo ${DATABASE_USER}
	    echo "This is the database username password: "
	    echo ${DATABASE_PASSWORD}

	    echo "VERY IMPORTANT - Any settings files should be edited to use the livecopy site database settings."
            ;;

	phpmysql)
            echo
	    echo `date`
	    echo "Setting up a database for a phpmysql site..."

        # We will set up a database for this project type for the convenience of the developers.
	    sudo mysqladmin create ${DATABASE_NAME}
	    sudo mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
	    echo 
	    echo `date`
	    echo "This is the database name: "
	    echo ${DATABASE_NAME}
	    echo "This is the database user which should be used to access the database: "
	    echo ${DATABASE_USER}
	    echo "This is the database username password: "
	    echo ${DATABASE_PASSWORD}

	    echo "VERY IMPORTANT - Any settings files should be edited to use the livecopy site database settings."
            ;;
	
	*)
            echo "Error - Invalid project type."
            exit -1
    esac

# -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Here we will build the livecopy site from the archives created earlier..."
# -------------------------------------------------------------------------------------------------

    sudo -u livecopy mkdir -p /home/livecopy/web
    case "${PROJECT_TYPE}" in

	drupal7)
            echo
	    echo `date`
	    echo "Build the dev site from the Drupal 7 site archive..."
	# NB - We are going to delete all the files and pull them out from the repository again after this initial creation.
        # The advantage of using the archive-restore method is that the settings.php file gets created correctly with the relevant 
        # database settings.
	# I.e. the settings file will contain any tweaks and settings which are in the beta site file but with just the basic 
	# database settings changed.
	    sudo drush archive-restore /home/livecopy/data_dumps/${PROJECT_NAME}_archive_${DATADUMP_DATETIME_STAMP}.tar --destination=/home/livecopy/web/${PROJECT_NAME} --db-url=mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME}

	    # Set the ownership to livecopy.
	    sudo chown -R livecopy:livecopy /home/livecopy/web/${PROJECT_NAME}
            ;;

	drupal6)
            echo
	    echo `date`
	    echo "Build the dev site from the Drupal 6 site archive..."
	# NB - We are going to delete all the files and pull them out from the repository again after this initial creation.
        # The advantage of using the archive-restore method is that the settings.php file gets created correctly with the relevant 
        # database settings.
	# I.e. the settings file will contain any tweaks and settings which are in the beta site file but with just the basic 
	# database settings changed.
	    sudo drush archive-restore /home/livecopy/data_dumps/${PROJECT_NAME}_archive_${DATADUMP_DATETIME_STAMP}.tar --destination=/home/livecopy/web/${PROJECT_NAME} --db-url=mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME}

	    # Set the ownership to livecopy.
	    sudo chown -R livecopy:livecopy /home/livecopy/web/${PROJECT_NAME}
            ;;

	symfonymysql)
            echo
	    echo `date`
	    echo "Build the dev site from the symfonymysql site archive..."
	    sudo tar -x --file=/home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=3
	    sudo mysql ${DATABASE_NAME} < /home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.sql

	    # Set the ownership to ${USER}
	    sudo chown -R livecopy:livecopy /home/livecopy/web/${PROJECT_NAME}
            ;;

	phpmysql)
            echo
	    echo `date`
	    echo "Build the dev site from the phpmysql site archive..."
	    sudo tar -x --file=/home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=3
	    sudo mysql ${DATABASE_NAME} < /home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.sql

	    # Set the ownership to livecopy.
	    sudo chown -R livecopy:livecopy /home/livecopy/projects/${PROJECT_NAME}
            ;;
	
	*)
            echo "Error - Invalid project type."
            exit -1
    esac

# --------------------------------------------------------------------------------------------------------------------
# Here we are going to save the Drupal settings file to be used when reloading a livecopy site when it already exists.
# --------------------------------------------------------------------------------------------------------------------

    sudo -u livecopy cp /home/livecopy/web/${PROJECT_NAME}/sites/default/settings.php /home/livecopy/settings.php.${PROJECT_NAME}


else

# ------------------------------------------------------------------------------------------------------
# Here we know that the livecopy version of the site has already been set up - therefore we just need to
# reload the database, reload the files and update the settings.php file.
# ------------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Load database over top of existing database..."
# -------------------------------------------------------------------------------------------------
    sudo mysqladmin --force drop livecopy${PROJECT_NAME}
    sudo mysqladmin create livecopy${PROJECT_NAME}

    sudo mysql livecopy${PROJECT_NAME} < /home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.sql

# -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Load files..."
# -------------------------------------------------------------------------------------------------
##ssh livecopy@localhost "mkdir -p /home/livecopy/web/${PROJECT_NAME}"
##ssh livecopy@localhost "rm -r /home/livecopy/web/${PROJECT_NAME}/*"
##ssh livecopy@localhost "tar -x --file=/home/livecopy/live_dump/${PROJECT_NAME}/${DATETIME_STAMP}_live_${PROJECT_NAME}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=1"

##sudo -u livecopy mkdir -p /home/livecopy/web/${PROJECT_NAME}
##    sudo -u livecopy rm -r /home/livecopy/web/${PROJECT_NAME}/*
##    ssh livecopy@localhost "tar -x --file=/home/livecopy/live_dump/${PROJECT_NAME}/${DATETIME_STAMP}_live_${PROJECT_NAME}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=1"


##    sudo chmod -R 777 /home/livecopy/web/${PROJECT_NAME}/sites/default
##    sudo -u livecopy rm -rf /home/livecopy/web/${PROJECT_NAME}/*
# This is used to remove the hidden (dot) files.
##    sudo -u livecopy rm -rf /home/livecopy/web/${PROJECT_NAME}/.??*
##    sudo -u livecopy rmdir /home/livecopy/web/${PROJECT_NAME}

##    sudo -u livecopy tar -x --file=/home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=4


            # Remove the existing files.
	    sudo chmod -R 777 /home/livecopy/web/${PROJECT_NAME}
	    sudo -u livecopy rm -rf /home/livecopy/web/${PROJECT_NAME}/*
            # This is used to remove the hidden (dot) files.
	    sudo -u livecopy rm -rf /home/livecopy/web/${PROJECT_NAME}/.??*
	    ## sudo rmdir /home/deploy/web/${PROJECT_NAME}

            # Pull the files from the repository.
	    ## sudo -u deploy sh -c "svn checkout http://localhost/svn/${PROJECT_NAME} /home/deploy/web/${PROJECT_NAME}"
    sudo -u livecopy tar -x --file=/home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=4

            # Copy back in the settings file.
	    sudo -u livecopy cp /home/livecopy/settings.php.${PROJECT_NAME} /home/livecopy/web/${PROJECT_NAME}/sites/default/settings.php

            sudo apache2ctl restart



# -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Now we will copy back in the original settings file..."
# -------------------------------------------------------------------------------------------------
####    sudo -u livecopy cp /home/livecopy/settings.php.${PROJECT_NAME} /home/livecopy/web/${PROJECT_NAME}/sites/default/settings.php


fi

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished..."
# -------------------------------------------------------------------------------------------------


exit 0




# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Load database..."
# -------------------------------------------------------------------------------------------------
sudo mysqladmin --force drop livecopy${PROJECT_NAME}
sudo mysqladmin create livecopy${PROJECT_NAME}

sudo mysql livecopy${PROJECT_NAME} < /home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.sql



# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Load files..."
# -------------------------------------------------------------------------------------------------
ssh livecopy@localhost "mkdir -p /home/livecopy/web/${PROJECT_NAME}"
ssh livecopy@localhost "rm -r /home/livecopy/web/${PROJECT_NAME}/*"
ssh livecopy@localhost "tar -x --file=/home/livecopy/live_dump/${PROJECT_NAME}/${DATETIME_STAMP}_live_${PROJECT_NAME}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=1"

##sudo -u livecopy mkdir -p /home/livecopy/web/${PROJECT_NAME}
sudo -u livecopy rm -r /home/livecopy/web/${PROJECT_NAME}/*
ssh livecopy@localhost "tar -x --file=/home/livecopy/live_dump/${PROJECT_NAME}/${DATETIME_STAMP}_live_${PROJECT_NAME}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=1"


sudo -u livecopy chmod -R 777 /home/livecopy/web/${PROJECT_NAME}/sites/default
sudo -u beta rm -rf /home/beta/web/${PROJECT_NAME}/*
# This is used to remove the hidden (dot) files.
sudo -u beta rm -rf /home/beta/web/${PROJECT_NAME}/.??*
sudo -u beta rmdir /home/beta/web/${PROJECT_NAME}

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Carry out project specific actions..."
# -------------------------------------------------------------------------------------------------

if [ "$PROJECT_TYPE" = "drupal7" ]
then

    # -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Processing drupal7 specific code..."
    # -------------------------------------------------------------------------------------------------

    # This should be something which copies the default.settings.php to settings.php and then appends 
    # the database settings variable.
    ssh livecopy@localhost "cp /home/livecopy/settings/${PROJECT_NAME}/settings.php /home/livecopy/web/${PROJECT_NAME}/sites/default/settings.php"

    # And then changes the .htaccess file to allow access.
    ssh livecopy@localhost "cp /home/livecopy/settings/${PROJECT_NAME}/.htaccess /home/livecopy/web/${PROJECT_NAME}/.htaccess"

fi

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished - the new site is at http://livecopy-${PROJECT_NAME}.${SERVER_FQDN}..."
# -------------------------------------------------------------------------------------------------
