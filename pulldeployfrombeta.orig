#!/bin/bash

# pulldeployfrombeta
# Pull deploy from beta

# -------------------------------------------------------------------------------------------------
# Script which will overwrite the deploy site and make it a copy of the beta site.
# -------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
# Logging setup
# -------------------------------------------------------------------------------------------------

# These lines have been copied from http://stackoverflow.com/questions/3173131/redirect-copy-of-stdout-to-log-file-from-within-bash-script-itself
# and will send the script output to a log file.
mkdir -p ~/logs/pullpush
DATE_TIME=`date +%Y%m%d-%H%M%S`
logfile=~/logs/pullpush/pulldeployfrombeta_${DATE_TIME}.log
mkfifo ${logfile}.pipe
tee < ${logfile}.pipe $logfile &
exec &> ${logfile}.pipe
rm ${logfile}.pipe

# -------------------------------------------------------------------------------------------------
# We are going to bring in a parameter which will be used to pull in a file containing values for
# variables - this is to prevent users accidentally using someone elses databases and web space.
# -------------------------------------------------------------------------------------------------

echo
echo `date`
echo "Testing for argument..."
if [ $1 ]
then
    echo "Argument supplied OK as $1"
    echo
else
    echo "ERROR - No argument supplied"
    exit -1
fi

# Check the local variables file exists.
if [ -e ~/.pullpush/${1} ]
then
        source ~/.pullpush/$1
else
        echo "ERROR - Configuration file $1 not found."
        exit -1
fi

# Check the global settings file exists.
if [ -e /home/pullpush/.pullpush/projects/${1} ]
then
        source /home/pullpush/.pullpush/projects/${1}
else
        echo "ERROR - Global configuration file $1 not found."
        exit -1
fi

DATE_TIME=`date +%Y%m%d-%H%M%S`

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Take sites offline..."
# -------------------------------------------------------------------------------------------------

# Future versions of the script will need to pick up if the site is D6 or D7.  It is possible that
# both of these commands can be run on D6 and D7 safely.

# NB - this should pick up the PROJECT_TYPE to work out which commands should be used to take the 
# sites off-line.

# These are the commands for Drupal 6.
# drush @${DEV_SITE_NAME} vset --always-set site_offline 1
# drush @${BETA_SITE_NAME} vset --always-set site_offline 1

# These commands work for Drupal 7.
drush @${BETA_SITE_NAME} vset maintenance_mode 1 --yes
drush @${DEPLOY_SITE_NAME} vset maintenance_mode 1 --yes

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Changing permissions on the files/ directory to enable the script user to be able to work with wwwrun owned files..."
# -------------------------------------------------------------------------------------------------
sudo chmod -R 777 ${BETA_DOCUMENT_ROOT}/sites/default/files
sudo chmod -R 777 ${DEPLOY_DOCUMENT_ROOT}/sites/default/files

# We also need to chmod this directory as the data export import module will have been added by Drush.
sudo chmod -R 777 ${DEPLOY_DOCUMENT_ROOT}/sites/all/modules

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Clearing out the caches on the sites to trim the database and files/ before copying and backing up..."
# -------------------------------------------------------------------------------------------------

# Bear in mind here that we may need to chmod the /files directory to 777 if we are not using Apache-ITK.

# Clear out the caches on the beta site.  As the deploy copy will become a copy of the beta site we do
# not want to pull down all the caches as well.  
drush @${BETA_SITE_NAME} cache-clear all

# NB - We do not want to clear out the deploy site cache as this deletes directories and this causes the svn 
# revert command to fail.  By the end of this script the deploy copy should be an exact copy of beta and that
# has had the caches cleared.
##drush @${DEV_SITE_NAME} cache-clear all

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Make backup copy of the beta site..."
# -------------------------------------------------------------------------------------------------
mysqldump -u ${BETA_MYSQL_USER} -p${BETA_MYSQL_PASS} ${BETA_MYSQL_DATABASE} > ${BACKUP_LOCATION}${DATE_TIME}_${BETA_MYSQL_DATABASE}.sql
tar --create --file=${BACKUP_LOCATION}${DATE_TIME}_${BETA_SITE_NAME}.tar ${BETA_DOCUMENT_ROOT}

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Make backup copy of the deploy site..."
# -------------------------------------------------------------------------------------------------
mkdir -p ${BACKUP_LOCATION}
mysqldump -u ${DEPLOY_MYSQL_USER} -p${DEPLOY_MYSQL_PASS} ${DEPLOY_MYSQL_DATABASE} > ${BACKUP_LOCATION}${DATE_TIME}_${DEPLOY_MYSQL_DATABASE}.sql
tar --create --file=${BACKUP_LOCATION}${DATE_TIME}_${DEPLOY_SITE_NAME}.tar ${DEPLOY_DOCUMENT_ROOT}


# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Revert current deploy files to to latest revision in the SVN repository..."
# -------------------------------------------------------------------------------------------------
# Maybe here we can clear out any cache/temp files.
# Maybe before reverting we could maybe rename modified files.

# Here we are going to revert all local files so we can update from SVN without conflicts.

# NB - RE deleted direcotries
# 'svn revert' will not revert deleted directories - but if there are any deleted directories then
# they should show up in the 'svn status' output check which is run next.  They should show if they 
# were deleted using rmdir or via 'svn delete'.
ssh deploy@localhost "svn revert --recursive ${DEPLOY_DOCUMENT_ROOT}"

# We are going to check the current svn status of the local deploy repository.
# Due to the revert command which has just been run there sould be no modified files.

# Here we are removing any extra files.  Errors may be caused if users have added files to beta which
# have the same name as any files which are being added by the developer - so it is necessary to remove
# the files from the developers copy before pulling down the new beta files.
svn status ${DEPLOY_DOCUMENT_ROOT} | grep "^?" | sed s/^?// | sed s/[[:space:]]*// | xargs -r rm -r

# The --quiet option tells 'svn status' to not output names of files which are not under
# version control.
deploy_svn_status=$(svn --quiet status ${DEPLOY_DOCUMENT_ROOT})

# If there was any output then we want to stop the script so the user can check changes.
if [ -n "$deploy_svn_status" ]
then
    echo "There are modified files/directories in the deploy version which have not been reverted - run 'svn status' and check the modified files."
    exit 0
fi

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Commit all the current beta files to SVN..."
# -------------------------------------------------------------------------------------------------
# As part of the first step in getting the deploy copy up-to-date with the latest beta is to get all 
# beta files checked into SVN

# The only file changes this should pick up are the new data files which are in sites/default/files.  First we are 
# going to output the changes to files/ and / and make sure they match.  If they don't match then there are non-data
# files/directories which have been changed in the Drupal part of the site which needs to be looked into

# NB - The output from the status commands needs to be sorted as lines are not always output in the same order.

beta_svn_status_of_whole_site=$(svn -u status ${BETA_DOCUMENT_ROOT} | sort)
beta_svn_status_of_files_directory=$(svn -u status ${BETA_DOCUMENT_ROOT}/sites/default/files | sort)

if [ "$beta_svn_status_of_whole_site" != "$beta_svn_status_of_files_directory" ]
then
    echo "The beta site files has files which have been modified which are not in the files/ directory - this needs to be looked into."
    exit 0
fi

# Now checking that the revision number of beta's local svn copy matches the repository.  If they don't match then the repository must have been 
# updated by another process.  We would need to see where that update come from and what (if any) database changes were made.
# file changes to SVN.
beta_local_revision=$(svn info ${BETA_DOCUMENT_ROOT} | grep '^Revision:' | sed s/^Revision:[[:space:]]*// )

# Trying to get revision without authentication details.
####remote_revision=$(svn --username kevinb --password xxxxxxxx info http://svn.chalfont.ssvc.com/Technology/Websites/radio-v2 | grep '^Revision:' | awk '{print $2}')
remote_revision=$(svn info ${SVN_URL} | grep '^Revision:' | awk '{print $2}')

if [ "$beta_local_revision" != "$remote_revision" ]
then
    echo "The revision number of the local copy does not match the remote respository version - this needs to be looked into - someone/some process has updated the repository which needs to be checked - also, check for any database changes?"
    exit 0
fi

# -------------------------------------------------------------------------------------------------
# OK, we've finished the checks - now lets commit the changes to beta files/ to the repository.  We will first svn add/delete 
# files as necessary.
# -------------------------------------------------------------------------------------------------

# NB - We could run the 'svn status' on just the files directory - but this should not be necessary as the previous checks are supposed to 
# check that only file/dirs in files/ have changed.  We'll leave the 'svn status' to pick up all changes because at least the site will
# be an exact copy of beta and the output on the command line will show all file changes.

echo "Adding all new files to svn control list..."
ssh beta@localhost "svn status ${BETA_DOCUMENT_ROOT} | grep \"^?\" | sed s/^?// | sed s/[[:space:]]*// | xargs -i svn add \"{}\"" 

echo "If files have been deleted then SVN needs to mark them for deletion..."
ssh beta@localhost "svn status ${BETA_DOCUMENT_ROOT} | grep \"^\!\" | sed s/^\!// | sed s/[[:space:]]*// | xargs -i svn delete \"{}\"" 

echo "Committing and deleting the files which have changed in the beta files/ directory..."
ssh beta@localhost "svn commit -m \"$DATE_TIME - Committing added/changed/deleted data files from beta into repository.\" ${BETA_DOCUMENT_ROOT} "

# Now we will run an update - the reason for this is so the revision number of beta local and
# the repository will match and can therefore be tested before running the next commit from beta.
# I.e. After running this update the revision numbers match.  When running the next test before 
# committing the beta files/ changes we can check the revision numbers and if they don't match then 
# the repository must have been updated by another process.  This would then need to be investigated.
echo "SVN update the local beta copy to get the revision number to match the repository revision..."
ssh beta@localhost "svn update ${BETA_DOCUMENT_ROOT}"

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Checkout latest SVN files to deploy..."
# -------------------------------------------------------------------------------------------------
# This gets the deploy files to be a match for what is in the repository which has just been updated 
# with the files from beta.  There may be some local files which are not in SVN and certain other
# files such as settings.php and some cache files which may be different on local as well.
ssh deploy@localhost "svn update ${DEPLOY_DOCUMENT_ROOT}"

# NB Now we need to chmod permissions on the files/ directory to enable the web server to manipulate
# these files.
sudo chmod -R 777 ${DEPLOY_DOCUMENT_ROOT}/sites/default/files

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Copy beta database on to deploy..."
# -------------------------------------------------------------------------------------------------
# NB the source dump file is put on to danni.
rm ${BACKUP_LOCATION}sql_sync_dump.sql

mysqladmin --force -u ${DEPLOY_MYSQL_USER} -p${DEPLOY_MYSQL_PASS} drop ${DEPLOY_MYSQL_DATABASE}
mysqladmin -u ${DEPLOY_MYSQL_USER} -p${DEPLOY_MYSQL_PASS} create ${DEPLOY_MYSQL_DATABASE}

drush sql-sync @${BETA_SITE_NAME} @${DEPLOY_SITE_NAME} --no-cache --source-dump=${BACKUP_LOCATION}sql_sync_dump.sql

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Bring sites online..."
# -------------------------------------------------------------------------------------------------
###drush @${DEV_SITE_NAME} vset --always-set site_offline 0
###drush @${BETA_SITE_NAME} vset --always-set site_offline 0

# These commands work for Drupal 7.
drush @${DEPLOY_SITE_NAME} vset maintenance_mode 0 --yes
drush @${BETA_SITE_NAME} vset maintenance_mode 0 --yes


# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished."
# -------------------------------------------------------------------------------------------------
exit 0
