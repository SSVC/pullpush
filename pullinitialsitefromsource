#!/bin/bash
#===================================================================================
#
# FILE: pullinitialsitefromsource
#
# USAGE: pullinitialsitefromsource [project type]
#
# DESCRIPTION: This will create an initial site which will be a vanilla copy from a
# framework.  It will achieve this by pulling down any source code needed from 
# repositories and creating any required databases.
#
# OPTIONS: see function ’usage’ below
# NOTES: ---
# AUTHOR: Kevin Bailey, kbailey@freewayprojects.com
# COMPANY: Freeway Projects Limited
#===================================================================================

# Make sure only one Pullpush script is running at any one time.
touch /var/lock/pullpush
chmod --quiet 666 /var/lock/pullpush
exec 9>/var/lock/pullpush
if ! flock -n 9  ; then
   echo "Another Pullpush script is currently running - try again later.";
   exit 1
fi

# -------------------------------------------------------------------------------------------------
# Set up global variables.
#
# We are going to explicitly set the script name variable.  Obviously the script name is available
# as $0 - but this is not consistent and may or may not contain the path.  Also, this means we can
# use the bash debugger without needing to handle the fact that $0 would contain something like
# 'bashdb'.
# -------------------------------------------------------------------------------------------------
SCRIPT_NAME=pullinitialsitefromsource
DATE_TIME=$(date +%Y%m%d-%H%M%S)

# -------------------------------------------------------------------------------------------------
# Set up the user to be able to run sudo commands - this will be revoked at the end of the script.
# -------------------------------------------------------------------------------------------------
sudo -v

# -------------------------------------------------------------------------------------------------
# Log all output from the script.
# 
# As we are going to be carrying out multiple steps and it is important we can see all the output
# to be able to diagnose problems.
# -------------------------------------------------------------------------------------------------

# Create a place for the log files.
sudo mkdir -p /var/log/pullpush
sudo chmod 777 /var/log/pullpush

# Create a pipe...
tmppipe=$(mktemp -u)
mkfifo ${tmppipe}

# ...then start a tee process which takes as its input the pipe - and output to the logfile (and 
# standard output) and then push the tee process into the background (subshell).
tee < ${tmppipe} /var/log/pullpush/${DATE_TIME}_${USER}_${SCRIPT_NAME}.log &

# Redirect both standard output and standard error to the pipe just created - these outputs
# will then be directed via the pipe to standard output (the current shell) and the log file.
exec &> ${tmppipe}

# This sets up the pipe to be removed - it will only be fully dropped when no process is using it.
rm ${tmppipe}

# -------------------------------------------------------------------------------------------------
# Import Pullpush functions.
# -------------------------------------------------------------------------------------------------
source /usr/local/share/pullpush/pullpush_functions

# -------------------------------------------------------------------------------------------------
# Local functions
#
# Here we will define all the functions used by this script.
# -------------------------------------------------------------------------------------------------

# Output a usage message - used when the parameters input are not correct.
usage () {
  echo "Usage: $SCRIPT_NAME -t [project type] -i [initial site name (1 to 6 alphanumeric characters)]"
}

# -------------------------------------------------------------------------------------------------
# Testing parameters
# -------------------------------------------------------------------------------------------------
while getopts ":t:i:" opt; do
  case $opt in
    t)
      PROJECT_TYPE=$OPTARG
      ;;
    i)
      INITIAL_SITE_NAME=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      usage
      exit 1
      ;;
  esac
done

# Check both parameters have had values assigned.
if [ -z $PROJECT_TYPE ] || [ -z $INITIAL_SITE_NAME ]
then
    echo "The project type and the initial site name need to be set."
    usage
    exit 1
fi

# Check that the project type is valid.
if [ $PROJECT_TYPE != "drupal7" ] && [ $PROJECT_TYPE != "drupal6" ] 
then
    echo "The currently supported project types are 'drupal7' and drupal6."
    exit 1
fi

# Check that the initial site name is valid.
if [ ${#INITIAL_SITE_NAME} -gt 6 ]; then
    echo "The initial site name should be no longer than 6 characters."
    usage
    exit 1
fi

# Check that only alphanumeric characters are used for the initial site name.
compressed="$(echo ${INITIAL_SITE_NAME} | sed -e 's/[^[:alnum:]]//g')"
if [ "$compressed" != "${INITIAL_SITE_NAME}" ] ; then
    echo "The initial site should only contain alphanumeric characters."
    usage
    exit 1
fi

if [ -e /home/${USER}/initial_sites/${INITIAL_SITE_NAME} ]
then
    echo "The initial site name has been used already.  Either remove the site or choose a name which has not been used already."
    usage
    exit 1
fi

# Load the configuration file and check it was loaded OK.
__load_configuration_file
if [ $? -ne 0 ]
then
    echo "Configuration file was not loaded."
fi

echo "All tests completed OK."

echo "Project type: ${PROJECT_TYPE}"
echo "Initial site name: ${INITIAL_SITE_NAME}"

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Creating the database and database user..."
# -------------------------------------------------------------------------------------------------
DATABASE_NAME=${USER}is${INITIAL_SITE_NAME}
DATABASE_USER=${USER}is${INITIAL_SITE_NAME}
PASSWORD=`cat /dev/urandom | base64 | tr -d '[:punct:]' | tr -d '[:digit:]' | tr -d '[:upper:]' | cut -c1-10 | head -1`

__create_mysql_database_and_user_account ${USER}is${INITIAL_SITE_NAME} ${USER}is${INITIAL_SITE_NAME} ${PASSWORD} 

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Downloading site files..."
# -------------------------------------------------------------------------------------------------
case "${PROJECT_TYPE}" in

    drupal7)
	echo
	echo `date`
	echo "Downloading a drupal7 site..."
	mkdir -p ~/initial_sites/${INITIAL_SITE_NAME}
        drush dl drupal-7 --drupal-project-rename=web --destination=/home/${USER}/initial_sites/${INITIAL_SITE_NAME}
        ;;
    
    drupal6)
	echo
	echo `date`
	echo "Downloading a drupal6 site..."
	mkdir -p ~/initial_sites/${INITIAL_SITE_NAME}
        drush dl drupal-6 --drupal-project-rename=web --destination=/home/${USER}/initial_sites/${INITIAL_SITE_NAME}
        ;;

    *)
        echo "Error - Invalid project type."
        exit -1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Set up the vhost for the site..."
# -------------------------------------------------------------------------------------------------

__set_up_vhost ${USER}-is-${INITIAL_SITE_NAME} /home/${USER}/initial_sites/${INITIAL_SITE_NAME}/web

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Carry out a site install on the new site based on the database just created..."
# -------------------------------------------------------------------------------------------------
case "${PROJECT_TYPE}" in

    drupal7|drupal6)
	echo
	echo `date`
        echo "Carrying out a site install on the Drupal 7 site..."

	drush site-install --db-url=mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME} --yes --root=/home/${USER}/initial_sites/${INITIAL_SITE_NAME}/web

        # Now we've allowed the user to set up the Drupal site we're going to reduce the user
        # down to only the rights which they need to run Drupal.  We do this by revoking all 
        # rights and then only allowing the required rights.
	sudo mysql --execute="REVOKE ALL PRIVILEGES, GRANT OPTION FROM '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
	sudo mysql --execute="GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}

	if [ "${WEB_SERVER_TYPE}" = "apache2prefork" ]
	then
	    echo
	    echo `date`
	    echo "Add the www-data user to the developers group so that the web server can write to the files/ directory..."
	    sudo adduser --quiet www-data ${USER}

	    echo
	    echo `date`
	    echo "Setting permissions for the files/ directory so the web server can write to it..."
	    sudo chmod -R 775 /home/${USER}/initial_sites/${INITIAL_SITE_NAME}/web/sites/default/files
	fi
        ;;
    
    *)
        echo "Error - Invalid project type."
        exit -1
esac

# This will remove the sudo timestamp.  There are a couple of reasons for this.  The first is that 
# it will force the user to validate on every script run.  And the second is that since the script
# should take less than 15 minutes (which is the default sudo timestamp) then by validating at the
# start we should be able to carry out a full script run without sudo timing out.
sudo -k

# -------------------------------------------------------------------------------------------------
echo 
echo `date`
echo "This is the URL for the new site: "
echo ${USER}-is-${INITIAL_SITE_NAME}.${SERVER_FQDN}
# -------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished."
# -------------------------------------------------------------------------------------------------

exit 0
