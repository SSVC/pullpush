#!/bin/bash

# pullinitialsitefromsource
# Pull initial site from source

# ------------------------------------------------------------------------------------------
# Script which will pull a vanilla site down from online sources and create an initial site.
# ------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
# Logging setup
# -------------------------------------------------------------------------------------------------

# These lines have been copied from 
# http://stackoverflow.com/questions/3173131/redirect-copy-of-stdout-to-log-file-from-within-bash-script-itself
# and will send the script output to a log file.
mkdir -p ~/logs/pullpush
DATE_TIME=`date +%Y%m%d-%H%M%S`
logfile=~/logs/pullpush/pullinitialsitefromsource_${DATE_TIME}.log
mkfifo ${logfile}.pipe
tee < ${logfile}.pipe $logfile &
exec &> ${logfile}.pipe
rm ${logfile}.pipe

# -------------------------------------------------------------------------------------------------
# We are going to bring in a parameter which will be used to pull in a file containing values for
# variables - this is to prevent users accidentally using someone elses databases and web space.
# -------------------------------------------------------------------------------------------------

echo
echo `date`
echo "Testing for arguments..."
if [ $1 ]
then
    echo
    echo "Project type supplied OK as $1"
else
    echo
    echo "ERROR - No project type supplied."
    exit -1
fi

if [ $2 ]
then
    echo
    echo "Initial site name supplied OK as $2"
else
    echo
    echo "ERROR - No initial site name supplied."
    exit -1
fi

# Todo
# Here we need to check that the project type supplied is valid.

# Todo
# Here we need to check that the intial site name has not been used already and is 
# valid.

# Check the Pullpush configuration file exists.
if [ -e /etc/pullpush/pullpush.conf ]
then
    source /etc/pullpush/pullpush.conf
else
    echo
    echo "ERROR - Pullpush configuration file not found."
    exit -1
fi

# Todo - Need to check if the initial site has been created already.

DATE_TIME=`date +%Y%m%d-%H%M%S`
PROJECT_TYPE=${1}
INITIAL_SITE_NAME=${2}

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Set up some initial variables and create the initial site directory..."
# -------------------------------------------------------------------------------------------------

# Should possibly use a better tool - but SLES does not have gpw or pwgen available.
# NB - We need to generate a shortish username to log in to the database as MySQL
# has a limit on database usernames of 16 characters.
# NB - It would be good to put hyphens inbetween the parts of the database name but 
# this causes problems with MySQL.
DATABASE_NAME=${USER}initialsite${INITIAL_SITE_NAME}
DATABASE_USER=`cat /dev/urandom | base64 | tr -d '[:punct:]' | tr -d '[:digit:]' | tr -d '[:upper:]' | cut -c1-10 | head -1`
DATABASE_PASSWORD=`cat /dev/urandom | base64 | tr -d '[:punct:]' | tr -d '[:digit:]' | tr -d '[:upper:]' | cut -c1-10 | head -1`

# Todo
# Need to check that the database name or database username has not been used already.

# We do this first to make sure the document root exists - otherwise the commands to restart Apache
# will produce warnings.
mkdir -p ~/initial_sites

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Download site files..."
# -------------------------------------------------------------------------------------------------
case "${PROJECT_TYPE}" in

    drupal7)
	echo
	echo `date`
	echo "Download a Drupal 7 site..."
        drush dl drupal-7 --drupal-project-rename=${INITIAL_SITE_NAME} --destination=/home/${USER}/initial_sites
        ;;
    
    drupal6)
	echo
	echo `date`
	echo "Download a Drupal 6 site..."
        drush dl drupal-6 --drupal-project-rename=${INITIAL_SITE_NAME} --destination=/home/${USER}/initial_sites
        ;;

    symfonymysql)
	echo
	echo `date`
	echo "Download the Symfony framework..."
	composer create-project symfony/framework-standard-edition /home/${USER}/initial_sites/${INITIAL_SITE_NAME}/ ${SYMFONY_VERSION}
	composer --working-dir=/home/${USER}/initial_sites/${INITIAL_SITE_NAME} update
        ;;
    
    phpmysql)
	echo
	echo `date`
	echo "Set up a basic PHP page..."
	mkdir -p /home/${USER}/initial_sites/${INITIAL_SITE_NAME}
	cp /usr/local/share/pullpush/index.php.template /home/${USER}/initial_sites/${INITIAL_SITE_NAME}/index.php
        ;;
    
    *)
        echo "Error - Invalid project type."
        exit -1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Set up the vhost for the site..."
# -------------------------------------------------------------------------------------------------
case "${SERVER_TYPE}" in

    debian)
	echo
	echo `date`
        echo "Set up vhost on Debian."

	# First we need to copy the relevant vhost template file.
	case ${PROJECT_TYPE} in
	    drupal7)
		echo "Copy the Drupal 7 vhost template..."
		sudo cp /usr/local/share/pullpush/vhost_drupal7.template /etc/apache2/sites-available/${USER}-initial-site-${INITIAL_SITE_NAME}
                ;;
            drupal6)
		echo "Copy the Drupal 6 vhost template..."
		sudo cp /usr/local/share/pullpush/vhost_drupal6.template /etc/apache2/sites-available/${USER}-initial-site-${INITIAL_SITE_NAME}
                ;;
	    symfonymysql)
		echo "Copy the Symfony vhost template..."
		sudo cp /usr/local/share/pullpush/vhost_symfonymysql.template /etc/apache2/sites-available/${USER}-initial-site-${INITIAL_SITE_NAME}
                ;;
	    phpmysql)
		echo "Copy the Symfony vhost template..."
		sudo cp /usr/local/share/pullpush/vhost_phpmysql.template /etc/apache2/sites-available/${USER}-initial-site-${INITIAL_SITE_NAME}
                ;;
	    *)
		echo "Error - Invalid project type."
		exit -1
        esac

##        sudo cp /usr/local/share/pullpush/vhost_drupal7.template /etc/apache2/sites-available/${USER}-initial-site-${INITIAL_SITE_NAME}

        # Here we will update the vhost files as necessary.  There may be a more elegant way of doing this. 
        sudo sed -i "s/username/${USER}/g" /etc/apache2/sites-available/${USER}-initial-site-${INITIAL_SITE_NAME}
        sudo sed -i "s/initialsitename/${INITIAL_SITE_NAME}/g" /etc/apache2/sites-available/${USER}-initial-site-${INITIAL_SITE_NAME}
        sudo sed -i "s/serverfqdn/${SERVER_FQDN}/g" /etc/apache2/sites-available/${USER}-initial-site-${INITIAL_SITE_NAME}
        sudo sed -i "s/serveradminemail/${SERVER_ADMIN_EMAIL}/g" /etc/apache2/sites-available/${USER}-initial-site-${INITIAL_SITE_NAME}

        sudo a2ensite ${USER}-initial-site-${INITIAL_SITE_NAME}
        sudo apache2ctl restart
        ;;
    
    sles)
	echo
	echo `date`
        echo "Set up a vhost on SLES."
        sudo cp /usr/local/share/pullpush/vhost_drupal7.template /etc/apache2/vhosts.d/${USER}-initial-site-${INITIAL_SITE_NAME}.conf

	case ${PROJECT_TYPE} in
	    drupal7)
		echo "Copy the Drupal 7 vhost template..."
		sudo cp /usr/local/share/pullpush/vhost_drupal7.template /etc/apache2/vhosts.d/${USER}-initial-site-${INITIAL_SITE_NAME}
                ;;
            drupal6)
		echo "Copy the Drupal 6 vhost template..."
		sudo cp /usr/local/share/pullpush/vhost_drupal6.template /etc/apache2/vhosts.d/${USER}-initial-site-${INITIAL_SITE_NAME}
                ;;
	    symfonymysql)
		echo "Copy the Symfonymysql vhost template..."
		sudo cp /usr/local/share/pullpush/vhost_symfonymysql.template /etc/apache2/vhosts.d/${USER}-initial-site-${INITIAL_SITE_NAME}
                ;;
	    *)
		echo "Error - Invalid project type."
		exit -1
        esac

        sudo sed -i "s/username/${USER}/g" /etc/apache2/vhosts.d/${USER}-initial-site-${INITIAL_SITE_NAME}.conf
        sudo sed -i "s/initialsitename/${INITIAL_SITE_NAME}/g" /etc/apache2/vhosts.d/${USER}-initial-site-${INITIAL_SITE_NAME}.conf
        sudo sed -i "s/serverfqdn/${SERVER_FQDN}/g" /etc/apache2/vhosts.d/${USER}-initial-site-${INITIAL_SITE_NAME}.conf
        sudo sed -i "s/serveradminemail/${SERVER_ADMIN_EMAIL}/g" /etc/apache2/vhosts.d/${USER}-initial-site-${INITIAL_SITE_NAME}.conf

        sudo /usr/sbin/rcapache2 restart
        ;;

    *)
        echo "Error - Invalid server type."
        exit -1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Create the database for the site..."
# -------------------------------------------------------------------------------------------------

# We will create a database for the Drupal site.  Then, we need to allow the user full access to this database as standard 
# privileges required by Drupal do not seem to allow us the create the initial tables.  We will then change privileges
# to only those needed for Drupal.
# NB - It is possible to run the 'drush site-install' command and specify the root user for MySQL - but this would expose the
# MYSQL root user and password to anyone who can read this script - and this might include user accounts which are not in the 
# wheel group.
case "${PROJECT_TYPE}" in

    drupal7)
        echo
	echo `date`
	echo "This will set up a database for a Drupal 7 site."

        # NB - It is possible to run the 'drush site-install' command and specify the root user for MySQL - but this would expose the
        # MYSQL root user and password to anyone who can read this script - and this might include user accounts which are not in the 
        # wheel group.
	sudo mysqladmin create ${DATABASE_NAME}
	sudo mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
        ;;

    drupal6)
        echo
	echo `date`
	echo "Setting up a database for a Drupal 6 site..."

        # NB - It is possible to run the 'drush site-install' command and specify the root user for MySQL - but this would expose the
        # MYSQL root user and password to anyone who can read this script - and this might include user accounts which are not in the 
        # wheel group.

	sudo mysqladmin create ${DATABASE_NAME}
	sudo mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
        ;;

    symfonymysql)
        echo
	echo `date`
	echo "Setting up a database for a symfonymysql site..."

        # Although Symfony does not need a database we will set one up for this project type for the convenience of the developers.
	sudo mysqladmin create ${DATABASE_NAME}
	sudo mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
	echo 
	echo `date`
	echo "This is the database name: "
	echo ${DATABASE_NAME}
	echo "This is the database user which should be used to access the database: "
	echo ${DATABASE_USER}
	echo "This is the database username password: "
	echo ${DATABASE_PASSWORD}
        ;;

    phpmysql)
        echo
	echo `date`
	echo "Setting up a database for a phpmysql site..."

        # We will set up a database for this project type for the convenience of the developers.
	sudo mysqladmin create ${DATABASE_NAME}
	sudo mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
	echo 
	echo `date`
	echo "This is the database name: "
	echo ${DATABASE_NAME}
	echo "This is the database user which should be used to access the database: "
	echo ${DATABASE_USER}
	echo "This is the database username password: "
	echo ${DATABASE_PASSWORD}
        ;;
    
    *)
        echo "Error - Invalid project type."
        exit -1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Carry out a site install on the new site based on the database just created..."
# -------------------------------------------------------------------------------------------------
case "${PROJECT_TYPE}" in

    drupal7)
	echo
	echo `date`
        echo "Carrying out a site install on the Drupal 7 site..."

##	cd ~/initial_sites/${INITIAL_SITE_NAME}

        # For D6 the profile should be 'default' and under D7 the profile should be 'standard'.
	drush site-install standard --db-url=mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME} --yes --root=/home/${USER}/initial_sites/${INITIAL_SITE_NAME}

        # Now we've allowed the user to set up the Drupal site we're going to reduce the user
        # down to only the rights which they need to run Drupal.  We do this by revoking all 
        # rights and then only allowing the required rights.
	sudo mysql --execute="REVOKE ALL PRIVILEGES, GRANT OPTION FROM '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
	sudo mysql --execute="GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}

	echo 
	echo `date`
	echo "This is the URL for the new site: "
	echo ${USER}-initial-site-${INITIAL_SITE_NAME}.${SERVER_FQDN}

	if [ "${APACHE_TYPE}" != "ITK" ]
	    then
	    echo
	    echo `date`
	    echo "Setting permissions for the files/ directory for non-ITK sites so the web server can write to it..."
	    sudo chmod 777 -R ~/initial_sites/${INITIAL_SITE_NAME}/sites/default/files
	fi
        ;;
    
    drupal6)
	echo
	echo `date`
        echo "Carrying out a site install on the Drupal 6 site..."

##	cd ~/initial_sites/${INITIAL_SITE_NAME}

        # For D6 the profile should be 'default' and under D7 the profile should be 'standard'.
	drush site-install default --db-url=mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME} --yes --root=/home/${USER}/initial_sites/${INITIAL_SITE_NAME}

        # Now we've allowed the user to set up the Drupal site we're going to reduce the user
        # down to only the rights which they need to run Drupal.  We do this by revoking all 
        # rights and then only allowing the required rights.
	sudo mysql --execute="REVOKE ALL PRIVILEGES, GRANT OPTION FROM '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
	sudo mysql --execute="GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}

	echo 
	echo `date`
	echo "This is the URL for the new site: "
	echo ${USER}-initial-site-${INITIAL_SITE_NAME}.${SERVER_FQDN}

	if [ "${APACHE_TYPE}" != "ITK" ]
	    then
	    echo
	    echo `date`
	    echo "Setting permissions for the files/ directory for non-ITK sites so the web server can write to it..."
	    sudo chmod 777 -R ~/initial_sites/${INITIAL_SITE_NAME}/sites/default/files
	fi
        ;;
    
    symfonymysql)
	echo
	echo `date`
        echo "Carrying out a site install on the symfonymysql site - currently no extra configuration needed for phpmysql sites..."

	echo 
	echo `date`
	echo "This is the URL for the new site: "
	echo ${USER}-initial-site-${INITIAL_SITE_NAME}.${SERVER_FQDN}/web/app_dev.php
        ;;
    
    phpmysql)
	echo
	echo `date`
        echo "Carrying out a site install on the phpmysql site - currently no extra configuration needed for phpmysql sites..."

	echo 
	echo `date`
	echo "This is the URL for the new site: "
	echo ${USER}-initial-site-${INITIAL_SITE_NAME}.${SERVER_FQDN}
        ;;
    
    *)
        echo "Error - Invalid project type."
        exit -1
esac


# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished."
# -------------------------------------------------------------------------------------------------

exit 0
