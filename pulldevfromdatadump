#!/bin/bash
#===================================================================================
#
# FILE: pulldevfromdatadump
#
# USAGE: pulldevfromdatadump -p [project type]
#
# DESCRIPTION: This will overwrite a dev site with a copy from a data dump.
#
# OPTIONS: see function ’usage’ below
# NOTES: ---
# AUTHOR: Kevin Bailey, kbailey@freewayprojects.com
# COMPANY: Freeway Projects Limited
#===================================================================================

# Make sure only one Pullpush script is running at any one time.
touch /var/lock/pullpush
chmod --quiet 666 /var/lock/pullpush
exec 9>/var/lock/pullpush
if ! flock -n 9  ; then
   echo "Another Pullpush script is currently running - try again later.";
   exit 1
fi

# -------------------------------------------------------------------------------------------------
# Set up global variables.
#
# We are going to explicitly set the script name variable.  Obviously the script name is available
# as $0 - but this is not consistent and may or may not contain the path.  Also, this means we can
# use the bash debugger without needing to handle the fact that $0 would contain something like
# 'bashdb'.
# -------------------------------------------------------------------------------------------------
SCRIPT_NAME=pulldevfromdatadump
DATE_TIME=$(date +%Y%m%d-%H%M%S)

# -------------------------------------------------------------------------------------------------
# Set up the user to be able to run sudo commands - this will be revoked at the end of the script.
# -------------------------------------------------------------------------------------------------
sudo -v

# -------------------------------------------------------------------------------------------------
# Log all output from the script.
# 
# As we are going to be carrying out multiple steps and it is important we can see all the output
# to be able to diagnose problems.
# -------------------------------------------------------------------------------------------------

# Create a place for the log files.
sudo mkdir -p /var/log/pullpush
sudo chmod 777 /var/log/pullpush

# Create a pipe...
tmppipe=$(mktemp -u)
mkfifo ${tmppipe}

# ...then start a tee process which takes as its input the pipe - and output to the logfile (and 
# standard output) and then push the tee process into the background (subshell).
tee < ${tmppipe} /var/log/pullpush/${DATE_TIME}_${USER}_${SCRIPT_NAME}.log &

# Redirect both standard output and standard error to the pipe just created - these outputs
# will then be directed via the pipe to standard output (the current shell) and the log file.
exec &> ${tmppipe}

# This sets up the pipe to be removed - it will only be fully dropped when no process is using it.
rm ${tmppipe}

# -------------------------------------------------------------------------------------------------
# Import Pullpush functions.
# -------------------------------------------------------------------------------------------------
source /usr/local/share/pullpush/pullpush_functions

# -------------------------------------------------------------------------------------------------
# Local functions
#
# Here we will define all the functions used by this script.
# -------------------------------------------------------------------------------------------------

# Output a usage message - used when the parameters input are not correct.
usage () {
    echo "Usage: $SCRIPT_NAME -p [project name]"
}

# -------------------------------------------------------------------------------------------------
# Testing parameters
# -------------------------------------------------------------------------------------------------
while getopts ":p:" opt; do
    case $opt in
	p)
	    PROJECT_NAME=$OPTARG
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	    exit 1
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    exit 1
	    ;;
    esac
done

# Check the parameter has had a value assigned.
if [ -z $PROJECT_NAME ]
then
    echo "ERROR - The project name needs to be set."
    usage
    exit 1
fi

# Check dev copy of the project exists.
if [ ! -e /home/${USER}/projects/${PROJECT_NAME}/web ]
then
    echo "ERROR - You do not appear to have a dev copy of the project."
    usage
    exit 1
fi

# Check the data dump file exists.
if [ ! -e /home/livecopy/projects/${PROJECT_NAME}/db/database_dump.sql ]
then
    echo "ERROR - The data dump file is missing."
    echo "The script is expecting to be able to read the file /home/livecopy/projects/${PROJECT_NAME}/db/database_dump.sql."
    usage
    exit 1
fi

# Load the project settings file or display an error if it does not exist.
if [ -e /etc/pullpush/projects/${PROJECT_NAME}.conf ]
then
    source /etc/pullpush/projects/${PROJECT_NAME}.conf
else
    echo "ERROR - The project settings file /etc/pullpush/projects/${PROJECT_NAME}.conf not found."
    exit 1
fi

# Load the configuration file and check it was loaded OK.
__load_configuration_file

if [ $? -ne 0 ]
then
    echo "Configuration file was not loaded."
fi

echo "All tests completed OK."
echo "Project name: ${PROJECT_NAME}"

# -------------------------------------------------------------------------------------------------
# The plan.
#
# Before this script is run the live copy should have been transmitted to the dev server from the
# live server.  This should have:
## Synchronised the site files in the document root from the live server to the dev server.
## Dumped out the database to a dump file which is transferred over to the dev server.
#
# Steps which are part of the plan.
## Check that the project exists and a dev copy exists.
## Make a copy of the settings file.
## Copy the files from the livecopy site over the dev files using rsync.
## Copy back in the settings file.
## Load the database from the db dump.
# -------------------------------------------------------------------------------------------------

# Make a copy of the settings file.
case "${PROJECT_TYPE}" in

    drupal7|drupal6)

	chmod 777 /home/${USER}/settings.php.dev.datadumpload.${PROJECT_NAME}
	cp /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/settings.php /home/${USER}/settings.php.dev.datadumpload.${PROJECT_NAME}
	;;
    *)
        echo "Error - Invalid project type."
        exit -1
esac


##rsync -vrlpgo --exclude=.svn/ --checksum --delete /home/${USER}/extracted_dump_files/${PROJECT_NAME}/  /home/${USER}/projects/${PROJECT_NAME}
rsync -vrlpgo --exclude=.svn/ --checksum --delete /home/livecopy/projects/${PROJECT_NAME}/web/ /home/${USER}/projects/${PROJECT_NAME}/web

# Copy the settings file back.
case "${PROJECT_TYPE}" in

    drupal7|drupal6)

	sudo chmod 777 /home/${USER}/projects/${PROJECT_NAME}/web/sites/default
	rm /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/settings.php

	cp /home/${USER}/settings.php.dev.datadumpload.${PROJECT_NAME} /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/settings.php
	;;
    *)
        echo "Error - Invalid project type."
        exit -1
esac



# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Load database over top of existing database..."
# -------------------------------------------------------------------------------------------------
sudo mysqladmin --force drop ${USER}pr${PROJECT_NAME}
sudo mysqladmin create ${USER}pr${PROJECT_NAME}

sudo mysql ${USER}pr${PROJECT_NAME} < /home/livecopy/projects/${PROJECT_NAME}/db/database_dump.sql



# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished..."
# -------------------------------------------------------------------------------------------------


exit 0



# Set up the database and database user.
DATABASE_NAME=livecopypr${PROJECT_NAME}
DATABASE_USER=livecopypr${PROJECT_NAME}
DATABASE_PASSWORD=`cat /dev/urandom | base64 | tr -d '[:punct:]' | tr -d '[:digit:]' | tr -d '[:upper:]' | cut -c1-10 | head -1`

# If necessary create the database and the vhost.  We are going to check the vhost
# conf file exists - and will assume that if the vhost has not been set up then 
# the DB has not been set up.
# if [ ! -e /home/livecopy/projects/${PROJECT_NAME}/web ]
if [ ! -e /etc/apache2/sites-available/livecopy-pr-${PROJECT_NAME} ]
then

    echo "Setting up the vhost..."
    __set_up_vhost livecopy-pr-${PROJECT_NAME} /home/livecopy/projects/${PROJECT_NAME}/web

    echo "Creating database..."
    __create_mysql_database_and_user_account ${DATABASE_NAME} ${DATABASE_USER} ${DATABASE_PASSWORD}
else

    # Here we are going to update the privileges so we have the password in this script and we can add it to the settings file.  
    # Also, it is a good idea to refresh the password to prevent connecting to the wrong database.
    echo "Updating database user as database has already been created..."
    mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
fi

# Load the DB from the backup.
##mysql livecopypr${PROJECT_NAME} < /home/livecopy/data_dumps/${PROJECT_NAME}_${DATETIME_STAMP}.sql

# todo - we need to drop the database and recreate it.
mysqladmin --force drop livecopypr${PROJECT_NAME}
mysqladmin create livecopypr${PROJECT_NAME}
mysql livecopypr${PROJECT_NAME} < /home/livecopy/projects/${PROJECT_NAME}/db/database_dump.sql

: <<COMMENT_OUT3

# Remove the exsiting site files.
sudo -u livecopy rm -rf /home/livecopy/projects/${PROJECT_NAME}/web
sudo -u livecopy -i mkdir -p /home/livecopy/projects/${PROJECT_NAME}/web
sudo -u livecopy -i tar -x --file=/home/livecopy/data_dumps/${PROJECT_NAME}_${DATETIME_STAMP}.tar --directory=/home/livecopy/projects/${PROJECT_NAME}/web --strip-components=1
COMMENT_OUT3

# Update the settings file.
case "${PROJECT_TYPE}" in

    drupal7)

	# We will copy the file before changing it as changing it in place gets complicated when trying to escape the sudo command.
	# Changing permissions may be neccessary as we do not know what permissions the files have been sent down with.  We are 
	# also going to explicitly set the temp file directory and the private file directory to make them suitable for the dev
	# server.
	sudo -u livecopy -i chmod -R 755 /home/livecopy/projects/${PROJECT_NAME}/web
	sudo -u livecopy -i chmod -R 777 /home/livecopy/projects/${PROJECT_NAME}/web/sites/default/files
	cp /home/livecopy/projects/${PROJECT_NAME}/web/sites/default/settings.php /home/${USER}/settings.php.livecopypr${PROJECT_NAME}
	cat <<EOFSETTINGS >> /home/${USER}/settings.php.livecopypr${PROJECT_NAME}

\$databases = array (
  'default' => 
  array (
    'default' => 
    array (
      'database' => '${DATABASE_NAME}',
      'username' => '${DATABASE_USER}',
      'password' => '${DATABASE_PASSWORD}',
      'host' => 'localhost',
      'port' => '',
      'driver' => 'mysql',
      'prefix' => '',
    ),
  ),
);

\$conf['file_temporary_path'] = '/tmp'; 

EOFSETTINGS

	sudo -u livecopy -i cp /home/${USER}/settings.php.livecopypr${PROJECT_NAME} /home/livecopy/projects/${PROJECT_NAME}/web/sites/default/settings.php
	rm /home/${USER}/settings.php.livecopypr${PROJECT_NAME}
	;;

    drupal6)

	# We will copy the file before changing it as changing it in place gets complicated when trying to excape the sudo command.
	cp /home/livecopy/projects/${PROJECT_NAME}/web/sites/default/settings.php /home/${USER}/settings.php.livecopypr${PROJECT_NAME}
	echo "\$db_url = 'mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME}';" >> /home/${USER}/settings.php.livecopypr${PROJECT_NAME}
	sudo -u livecopy -i cp /home/${USER}/settings.php.livecopypr${PROJECT_NAME} /home/livecopy/projects/${PROJECT_NAME}/web/sites/default/settings.php
	rm /home/${USER}/settings.php.livecopypr${PROJECT_NAME}
	;;

    *)
        echo "Error - Invalid project type."
        exit -1
esac

# Clear out any caches - this may be needed as the site is now in a different location.
case "${PROJECT_TYPE}" in

    drupal7|drupal6)
	sudo -u livecopy -i drush --root=/home/livecopy/projects/${PROJECT_NAME}/web cache-clear all
        ;;

    *)
        echo "Error - Invalid project type."
        exit 1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished - the live copy of the site is at http://livecopy-pr-${PROJECT_NAME}.${SERVER_FQDN}"
# -------------------------------------------------------------------------------------------------

exit 0








# pulldevfromdatadump
# Pull dev from data dump

# ------------------------------------------------------------------------------------------------
# Script which will update the dev copy from the data dump of a live site.  This is primarily
# useful in the case where the live site has been updated directly.  This script will enable the
# latest version of a live site to be brought into a dev copy and then can then be pushed forward
# as the new site version.
# ------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
# Logging setup
# -------------------------------------------------------------------------------------------------

# These lines have been copied from http://stackoverflow.com/questions/3173131/redirect-copy-of-stdout-to-log-file-from-within-bash-script-itself
# and will send the script output to a log file.
mkdir -p ~/logs/pullpush
DATE_TIME=`date +%Y%m%d-%H%M%S`
logfile=~/logs/pullpush/pulldevfromdatadump_${DATE_TIME}.log
mkfifo ${logfile}.pipe
tee < ${logfile}.pipe $logfile &
exec &> ${logfile}.pipe
rm ${logfile}.pipe

# -------------------------------------------------------------------------------------------------
# Testing for arguments and configuration files.
# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Testing for argument which should be the project name..."
if [ $1 ]
then
    echo "Argument supplied OK as $1"
    echo
else
    echo "ERROR - No argument supplied"
    exit -1
fi

echo
echo `date`
echo "Testing for argument which should be the datatime stamp..."
if [ $2 ]
then
    echo "Argument supplied OK as $2"
    echo
else
    echo "ERROR - No argument supplied"
    exit -1
fi

# Set up variables used through this script.
PROJECT_NAME=${1}
DATADUMP_DATETIME_STAMP=${2}
DATE_TIME=`date +%Y%m%d-%H%M%S`

# Check the Pullpush configuration file exists.
if [ -e /etc/pullpush/pullpush.conf ]
then
    source /etc/pullpush/pullpush.conf
else
    echo
    echo "ERROR - Pullpush configuration file not found."
    exit -1
fi

# Check the project settings file exists.
if [ -e /etc/pullpush/projects/${PROJECT_NAME}.conf ]
then
    source /etc/pullpush/projects/${PROJECT_NAME}.conf
else
    echo "ERROR - The configuration file /etc/pullpush/projects/${PROJECT_NAME}.conf not found."
    exit -1
fi

# ----------------------------------------------------------------------
# If the dev site does not exist then we need to exit out.  Pulling from
# a live site data dump to a dev site should only be used when a site is 
# already set up as a project.
# If this is to be a new project then the live site should be created as 
# an initial site first.
# ----------------------------------------------------------------------
if [ ! -e /home/${USER}/projects/${PROJECT_NAME} ]
then
    
    echo "ERROR - There is not an existing dev version of this project."
    exit -1
fi

# -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Make backup copy of the dev site..."
# -------------------------------------------------------------------------------------------------
mkdir -p /home/${USER}/backups/dev_sites
sudo mysqldump ${USER}${PROJECT_NAME} > /home/${USER}/backups/dev_sites/${PROJECT_NAME}_${DATE_TIME}.sql
tar --create --file=/home/${USER}/backups/dev_sites/${PROJECT_NAME}_${DATE_TIME}.tar /home/${USER}/projects/${PROJECT_NAME}

# ------------------------------------------------------------------------------------------------------
# Here we know that a dev version of the site has already been set up - therefore we just need to
# reload the files, update the settings.php file and reload the database.
# ------------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Load files..."
# -------------------------------------------------------------------------------------------------
##ssh livecopy@localhost "mkdir -p /home/livecopy/web/${PROJECT_NAME}"
##ssh livecopy@localhost "rm -r /home/livecopy/web/${PROJECT_NAME}/*"
##ssh livecopy@localhost "tar -x --file=/home/livecopy/live_dump/${PROJECT_NAME}/${DATETIME_STAMP}_live_${PROJECT_NAME}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=1"

##sudo -u livecopy mkdir -p /home/livecopy/web/${PROJECT_NAME}
##    sudo -u livecopy rm -r /home/livecopy/web/${PROJECT_NAME}/*
##    ssh livecopy@localhost "tar -x --file=/home/livecopy/live_dump/${PROJECT_NAME}/${DATETIME_STAMP}_live_${PROJECT_NAME}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=1"


##    sudo chmod -R 777 /home/livecopy/web/${PROJECT_NAME}/sites/default
##    sudo -u livecopy rm -rf /home/livecopy/web/${PROJECT_NAME}/*
# This is used to remove the hidden (dot) files.
##    sudo -u livecopy rm -rf /home/livecopy/web/${PROJECT_NAME}/.??*
##    sudo -u livecopy rmdir /home/livecopy/web/${PROJECT_NAME}

##    sudo -u livecopy tar -x --file=/home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=4


            # Remove the existing files.
##	    sudo chmod -R 777 /home/livecopy/web/${PROJECT_NAME}
##	    sudo -u livecopy rm -rf /home/livecopy/web/${PROJECT_NAME}/*
            # This is used to remove the hidden (dot) files.
##	    sudo -u livecopy rm -rf /home/livecopy/web/${PROJECT_NAME}/.??*
	    ## sudo rmdir /home/deploy/web/${PROJECT_NAME}

            # Pull the files from the repository.
	    ## sudo -u deploy sh -c "svn checkout http://localhost/svn/${PROJECT_NAME} /home/deploy/web/${PROJECT_NAME}"
##    sudo -u livecopy tar -x --file=/home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=4


# Make a copy of the settings file.
chmod 777 /home/${USER}/settings.php.dev.datadumpload.${PROJECT_NAME}
cp /home/${USER}/projects/${PROJECT_NAME}/sites/default/settings.php /home/${USER}/settings.php.dev.datadumpload.${PROJECT_NAME}

# Here we are going to update the files in the dev site with files from the data dump.  The 
# best way to do this is to use rsync as this can be set to leave the .svn directories untouched.
# We will need to extract the dump file to a directory and then carry out an rsync between that directory 
# and the files in the dev directory.

# Make sure the directory exists for the dump files to be extracted into.
mkdir -p ~/extracted_dump_files/${PROJECT_NAME}

# And clear out any previously extracted files.
sudo chmod -R 777 /home/${USER}/extracted_dump_files/${PROJECT_NAME}/sites/default
rm -rf /home/${USER}/extracted_dump_files/${PROJECT_NAME}/*
# This is used to remove the hidden (dot) files.
rm -rf /home/${USER}/extracted_dump_files/${PROJECT_NAME}/.??*
## rmdir /home/${USER}/extracted_dump_files/${PROJECT_NAME}

tar -x --file=/home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.tar --directory=/home/${USER}/extracted_dump_files/${PROJECT_NAME} --strip-components=1

##cp /home/${USER}/settings.php.dev.${PROJECT_NAME} /home/${USER}/projects/${PROJECT_NAME}/sites/default/settings.php

rsync -vrlpgo --exclude=.svn/ --checksum --delete /home/${USER}/extracted_dump_files/${PROJECT_NAME}/  /home/${USER}/projects/${PROJECT_NAME}




# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Now we will copy back in the original settings file..."
# -------------------------------------------------------------------------------------------------
####    sudo -u livecopy cp /home/livecopy/settings.php.${PROJECT_NAME} /home/livecopy/web/${PROJECT_NAME}/sites/default/settings.php


            # Copy back in the settings file.
## sudo -u livecopy cp /home/livecopy/settings.php.${PROJECT_NAME} /home/livecopy/web/${PROJECT_NAME}/sites/default/settings.php

sudo chmod 777 /home/${USER}/projects/${PROJECT_NAME}/sites/default
rm /home/${USER}/projects/${PROJECT_NAME}/sites/default/settings.php

cp /home/${USER}/settings.php.dev.datadumpload.${PROJECT_NAME} /home/${USER}/projects/${PROJECT_NAME}/sites/default/settings.php


##sudo apache2ctl restart



# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Load database over top of existing database..."
# -------------------------------------------------------------------------------------------------
sudo mysqladmin --force drop ${USER}${PROJECT_NAME}
sudo mysqladmin create ${USER}${PROJECT_NAME}

sudo mysql ${USER}${PROJECT_NAME} < /home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.sql



# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished..."
# -------------------------------------------------------------------------------------------------


exit 0
