#!/bin/bash
#===================================================================================
#
# FILE: pulldevfromdatadump
#
# USAGE: pulldevfromdatadump -p [project type]
#
# DESCRIPTION: This will overwrite a dev site with a copy from a data dump.
#
# OPTIONS: see function ’usage’ below
# NOTES: ---
# AUTHOR: Kevin Bailey, kbailey@freewayprojects.com
# COMPANY: Freeway Projects Limited
#===================================================================================

# Make sure only one Pullpush script is running at any one time.
touch /var/lock/pullpush
chmod --quiet 666 /var/lock/pullpush
exec 9>/var/lock/pullpush
if ! flock -n 9  ; then
   echo "Another Pullpush script is currently running - try again later.";
   exit 1
fi

# -------------------------------------------------------------------------------------------------
# Set up global variables.
#
# We are going to explicitly set the script name variable.  Obviously the script name is available
# as $0 - but this is not consistent and may or may not contain the path.  Also, this means we can
# use the bash debugger without needing to handle the fact that $0 would contain something like
# 'bashdb'.
# -------------------------------------------------------------------------------------------------
SCRIPT_NAME=pulldevfromdatadump
DATE_TIME=$(date +%Y%m%d-%H%M%S)

# -------------------------------------------------------------------------------------------------
# Set up the user to be able to run sudo commands - this will be revoked at the end of the script.
# -------------------------------------------------------------------------------------------------
sudo -v

# -------------------------------------------------------------------------------------------------
# Log all output from the script.
# 
# As we are going to be carrying out multiple steps and it is important we can see all the output
# to be able to diagnose problems.
# -------------------------------------------------------------------------------------------------

# Create a place for the log files.
sudo mkdir -p /var/log/pullpush
sudo chmod 777 /var/log/pullpush

# Create a pipe...
tmppipe=$(mktemp -u)
mkfifo ${tmppipe}

# ...then start a tee process which takes as its input the pipe - and output to the logfile (and 
# standard output) and then push the tee process into the background (subshell).
tee < ${tmppipe} /var/log/pullpush/${DATE_TIME}_${USER}_${SCRIPT_NAME}.log &

# Redirect both standard output and standard error to the pipe just created - these outputs
# will then be directed via the pipe to standard output (the current shell) and the log file.
exec &> ${tmppipe}

# This sets up the pipe to be removed - it will only be fully dropped when no process is using it.
rm ${tmppipe}

# -------------------------------------------------------------------------------------------------
# Import Pullpush functions.
# -------------------------------------------------------------------------------------------------
source /usr/local/share/pullpush/pullpush_functions

# -------------------------------------------------------------------------------------------------
# Local functions
#
# Here we will define all the functions used by this script.
# -------------------------------------------------------------------------------------------------

# Output a usage message - used when the parameters input are not correct.
usage () {
    echo "Usage: $SCRIPT_NAME -p [project name]"
}

# -------------------------------------------------------------------------------------------------
# Testing parameters
# -------------------------------------------------------------------------------------------------
while getopts ":p:" opt; do
    case $opt in
	p)
	    PROJECT_NAME=$OPTARG
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	    exit 1
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    exit 1
	    ;;
    esac
done

# Check the parameter has had a value assigned.
if [ -z $PROJECT_NAME ]
then
    echo "ERROR - The project name needs to be set."
    usage
    exit 1
fi

# Check dev copy of the project exists.
if [ ! -e /home/${USER}/projects/${PROJECT_NAME}/web ]
then
    echo "ERROR - You do not appear to have a dev copy of the project."
    usage
    exit 1
fi

# Check the data dump file exists.
if [ ! -e /home/livecopy/projects/${PROJECT_NAME}/db/database_dump.sql ]
then
    echo "ERROR - The data dump file is missing."
    echo "The script is expecting to be able to read the file /home/livecopy/projects/${PROJECT_NAME}/db/database_dump.sql."
    usage
    exit 1
fi

# Load the project settings file or display an error if it does not exist.
if [ -e /etc/pullpush/projects/${PROJECT_NAME}.conf ]
then
    source /etc/pullpush/projects/${PROJECT_NAME}.conf
else
    echo "ERROR - The project settings file /etc/pullpush/projects/${PROJECT_NAME}.conf not found."
    exit 1
fi

# Load the configuration file and check it was loaded OK.
__load_configuration_file

if [ $? -ne 0 ]
then
    echo "Configuration file was not loaded."
fi

echo "All tests completed OK."
echo "Project name: ${PROJECT_NAME}"

# -------------------------------------------------------------------------------------------------
# The plan.
#
# Before this script is run the live copy should have been transmitted to the dev server from the
# live server.  This should have:
## Synchronised the site files in the document root from the live server to the dev server.
## Dumped out the database to a dump file which is transferred over to the dev server.
#
# Steps which are part of the plan.
## Check that the project exists and a dev copy exists.
## Make a copy of the settings file.
## Copy the files from the livecopy site over the dev files using rsync.
## Copy back in the settings file.
## Load the database from the db dump.
# -------------------------------------------------------------------------------------------------

# Make a copy of the settings file.
case "${PROJECT_TYPE}" in

    drupal7|drupal6)

	chmod 777 /home/${USER}/settings.php.dev.datadumpload.${PROJECT_NAME}
	cp /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/settings.php /home/${USER}/settings.php.dev.datadumpload.${PROJECT_NAME}
	;;
    *)
        echo "Error - Invalid project type."
        exit -1
esac


##rsync -vrlpgo --exclude=.svn/ --checksum --delete /home/${USER}/extracted_dump_files/${PROJECT_NAME}/  /home/${USER}/projects/${PROJECT_NAME}
rsync -vrlpgo --exclude=.svn/ --checksum --delete /home/livecopy/projects/${PROJECT_NAME}/web/ /home/${USER}/projects/${PROJECT_NAME}/web

# Copy the settings file back.
case "${PROJECT_TYPE}" in

    drupal7|drupal6)

	sudo chmod 777 /home/${USER}/projects/${PROJECT_NAME}/web/sites/default
	rm /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/settings.php

	cp /home/${USER}/settings.php.dev.datadumpload.${PROJECT_NAME} /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/settings.php
	;;
    *)
        echo "Error - Invalid project type."
        exit -1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Load database over top of existing database..."
# -------------------------------------------------------------------------------------------------
mysqladmin --force drop ${USER}pr${PROJECT_NAME}
mysqladmin create ${USER}pr${PROJECT_NAME}

mysql ${USER}pr${PROJECT_NAME} < /home/livecopy/projects/${PROJECT_NAME}/db/database_dump.sql

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished..."
# -------------------------------------------------------------------------------------------------
exit 0
