#!/bin/bash

# pulldevfromdatadump
# Pull dev from data dump

# ------------------------------------------------------------------------------------------------
# Script which will update the dev copy from the data dump of a live site.  This is primarily
# useful in the case where the live site has been updated directly.  This script will enable the
# latest version of a live site to be brought into a dev copy and then can then be pushed forward
# as the new site version.
# ------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
# Logging setup
# -------------------------------------------------------------------------------------------------

# These lines have been copied from http://stackoverflow.com/questions/3173131/redirect-copy-of-stdout-to-log-file-from-within-bash-script-itself
# and will send the script output to a log file.
mkdir -p ~/logs/pullpush
DATE_TIME=`date +%Y%m%d-%H%M%S`
logfile=~/logs/pullpush/pulldevfromdatadump_${DATE_TIME}.log
mkfifo ${logfile}.pipe
tee < ${logfile}.pipe $logfile &
exec &> ${logfile}.pipe
rm ${logfile}.pipe

# -------------------------------------------------------------------------------------------------
# Testing for arguments and configuration files.
# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Testing for argument which should be the project name..."
if [ $1 ]
then
    echo "Argument supplied OK as $1"
    echo
else
    echo "ERROR - No argument supplied"
    exit -1
fi

echo
echo `date`
echo "Testing for argument which should be the datatime stamp..."
if [ $2 ]
then
    echo "Argument supplied OK as $2"
    echo
else
    echo "ERROR - No argument supplied"
    exit -1
fi

# Set up variables used through this script.
PROJECT_NAME=${1}
DATADUMP_DATETIME_STAMP=${2}
DATE_TIME=`date +%Y%m%d-%H%M%S`

# Check the Pullpush configuration file exists.
if [ -e /etc/pullpush/pullpush.conf ]
then
    source /etc/pullpush/pullpush.conf
else
    echo
    echo "ERROR - Pullpush configuration file not found."
    exit -1
fi

# Check the project settings file exists.
if [ -e /etc/pullpush/projects/${PROJECT_NAME}.conf ]
then
    source /etc/pullpush/projects/${PROJECT_NAME}.conf
else
    echo "ERROR - The configuration file /etc/pullpush/projects/${PROJECT_NAME}.conf not found."
    exit -1
fi

# ----------------------------------------------------------------------
# If the dev site does not exist then we need to exit out.  Pulling from
# a live site data dump to a dev site should only be used when a site is 
# already set up as a project.
# If this is to be a new project then the live site should be created as 
# an initial site first.
# ----------------------------------------------------------------------
if [ ! -e /home/${USER}/projects/${PROJECT_NAME} ]
then
    
    echo "ERROR - There is not an existing dev version of this project."
    exit -1
fi

# -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Make backup copy of the dev site..."
# -------------------------------------------------------------------------------------------------
mkdir -p /home/${USER}/backups/dev_sites
sudo mysqldump ${USER}${PROJECT_NAME} > /home/${USER}/backups/dev_sites/${PROJECT_NAME}_${DATE_TIME}.sql
tar --create --file=/home/${USER}/backups/dev_sites/${PROJECT_NAME}_${DATE_TIME}.tar /home/${USER}/projects/${PROJECT_NAME}

# ------------------------------------------------------------------------------------------------------
# Here we know that a dev version of the site has already been set up - therefore we just need to
# reload the files, update the settings.php file and reload the database.
# ------------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Load files..."
# -------------------------------------------------------------------------------------------------
##ssh livecopy@localhost "mkdir -p /home/livecopy/web/${PROJECT_NAME}"
##ssh livecopy@localhost "rm -r /home/livecopy/web/${PROJECT_NAME}/*"
##ssh livecopy@localhost "tar -x --file=/home/livecopy/live_dump/${PROJECT_NAME}/${DATETIME_STAMP}_live_${PROJECT_NAME}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=1"

##sudo -u livecopy mkdir -p /home/livecopy/web/${PROJECT_NAME}
##    sudo -u livecopy rm -r /home/livecopy/web/${PROJECT_NAME}/*
##    ssh livecopy@localhost "tar -x --file=/home/livecopy/live_dump/${PROJECT_NAME}/${DATETIME_STAMP}_live_${PROJECT_NAME}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=1"


##    sudo chmod -R 777 /home/livecopy/web/${PROJECT_NAME}/sites/default
##    sudo -u livecopy rm -rf /home/livecopy/web/${PROJECT_NAME}/*
# This is used to remove the hidden (dot) files.
##    sudo -u livecopy rm -rf /home/livecopy/web/${PROJECT_NAME}/.??*
##    sudo -u livecopy rmdir /home/livecopy/web/${PROJECT_NAME}

##    sudo -u livecopy tar -x --file=/home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=4


            # Remove the existing files.
##	    sudo chmod -R 777 /home/livecopy/web/${PROJECT_NAME}
##	    sudo -u livecopy rm -rf /home/livecopy/web/${PROJECT_NAME}/*
            # This is used to remove the hidden (dot) files.
##	    sudo -u livecopy rm -rf /home/livecopy/web/${PROJECT_NAME}/.??*
	    ## sudo rmdir /home/deploy/web/${PROJECT_NAME}

            # Pull the files from the repository.
	    ## sudo -u deploy sh -c "svn checkout http://localhost/svn/${PROJECT_NAME} /home/deploy/web/${PROJECT_NAME}"
##    sudo -u livecopy tar -x --file=/home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.tar --directory=/home/livecopy/web/${PROJECT_NAME} --strip-components=4


# Make a copy of the settings file.
chmod 777 /home/${USER}/settings.php.dev.datadumpload.${PROJECT_NAME}
cp /home/${USER}/projects/${PROJECT_NAME}/sites/default/settings.php /home/${USER}/settings.php.dev.datadumpload.${PROJECT_NAME}

# Here we are going to update the files in the dev site with files from the data dump.  The 
# best way to do this is to use rsync as this can be set to leave the .svn directories untouched.
# We will need to extract the dump file to a directory and then carry out an rsync between that directory 
# and the files in the dev directory.

# Make sure the directory exists for the dump files to be extracted into.
mkdir -p ~/extracted_dump_files/${PROJECT_NAME}

# And clear out any previously extracted files.
sudo chmod -R 777 /home/${USER}/extracted_dump_files/${PROJECT_NAME}/sites/default
rm -rf /home/${USER}/extracted_dump_files/${PROJECT_NAME}/*
# This is used to remove the hidden (dot) files.
rm -rf /home/${USER}/extracted_dump_files/${PROJECT_NAME}/.??*
## rmdir /home/${USER}/extracted_dump_files/${PROJECT_NAME}

tar -x --file=/home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.tar --directory=/home/${USER}/extracted_dump_files/${PROJECT_NAME} --strip-components=1

##cp /home/${USER}/settings.php.dev.${PROJECT_NAME} /home/${USER}/projects/${PROJECT_NAME}/sites/default/settings.php

rsync -vrlpgo --exclude=.svn/ --checksum --delete /home/${USER}/extracted_dump_files/${PROJECT_NAME}/  /home/${USER}/projects/${PROJECT_NAME}




# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Now we will copy back in the original settings file..."
# -------------------------------------------------------------------------------------------------
####    sudo -u livecopy cp /home/livecopy/settings.php.${PROJECT_NAME} /home/livecopy/web/${PROJECT_NAME}/sites/default/settings.php


            # Copy back in the settings file.
## sudo -u livecopy cp /home/livecopy/settings.php.${PROJECT_NAME} /home/livecopy/web/${PROJECT_NAME}/sites/default/settings.php

sudo chmod 777 /home/${USER}/projects/${PROJECT_NAME}/sites/default
rm /home/${USER}/projects/${PROJECT_NAME}/sites/default/settings.php

cp /home/${USER}/settings.php.dev.datadumpload.${PROJECT_NAME} /home/${USER}/projects/${PROJECT_NAME}/sites/default/settings.php


##sudo apache2ctl restart



# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Load database over top of existing database..."
# -------------------------------------------------------------------------------------------------
sudo mysqladmin --force drop ${USER}${PROJECT_NAME}
sudo mysqladmin create ${USER}${PROJECT_NAME}

sudo mysql ${USER}${PROJECT_NAME} < /home/livecopy/data_dumps/${PROJECT_NAME}_${DATADUMP_DATETIME_STAMP}.sql



# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished..."
# -------------------------------------------------------------------------------------------------


exit 0
