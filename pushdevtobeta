#!/bin/bash

# pushdevtobeta
# Push dev to beta

# -------------------------------------------------------------------------------------------------
# Script which will copy the dev site to the beta site.
# -------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
# Logging setup
# -------------------------------------------------------------------------------------------------

# These lines have been copied from http://stackoverflow.com/questions/3173131/redirect-copy-of-stdout-to-log-file-from-within-bash-script-itself
# and will send the script output to a log file.
mkdir -p ~/logs/pullpush
DATE_TIME=`date +%Y%m%d-%H%M%S`
logfile=~/logs/pullpush/pushdevtobeta_${DATE_TIME}.log
mkfifo ${logfile}.pipe
tee < ${logfile}.pipe $logfile &
exec &> ${logfile}.pipe
rm ${logfile}.pipe

# -------------------------------------------------------------------------------------------------
# We are going to bring in a parameter which will be used to pull in a file containing values for
# variables - this is to prevent users accidentally using someone elses databases and web space.
# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Testing for argument..."
if [ $1 ]
then
    echo "Argument supplied OK as $1"
    echo
else
    echo "ERROR - No argument supplied"
    exit -1
fi

# Check the variables file exists.
if [ -e ~/.pullpush/${1} ]
then
        source ~/.pullpush/$1
else
        echo "ERROR - Configuration file $1 not found."
        exit -1
fi

# Check the global settings file exists.
if [ -e /home/pullpush/.pullpush/projects/${1} ]
then
        source /home/pullpush/.pullpush/projects/${1}
else
        echo "ERROR - Global configuration file $1 not found."
        exit -1
fi

DATE_TIME=`date +%Y%m%d-%H%M%S`

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Take sites offline..."
# -------------------------------------------------------------------------------------------------

# Future versions of the script will need to pick up if the site is D6 or D7.  It is possible that
# both of these commands can be run on D6 and D7 safely.

# These are the commands for Drupal 6.
# drush @${DEV_SITE_NAME} vset --always-set site_offline 1
# drush @${BETA_SITE_NAME} vset --always-set site_offline 1

# These commands work for Drupal 7.
drush @${DEV_SITE_NAME} vset maintenance_mode 1 --yes
drush @${BETA_SITE_NAME} vset maintenance_mode 1 --yes

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Changing permissions on the files/ directory to enable the script user to be able to work with wwwrun owned files..."
# -------------------------------------------------------------------------------------------------
sudo chmod -R 777 ${BETA_DOCUMENT_ROOT}/sites/default/files
sudo chmod -R 777 ${DEV_DOCUMENT_ROOT}/sites/default/files

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Clearing out the caches on the sites to trim the database and files/ before copying and backing up..."
# -------------------------------------------------------------------------------------------------

# Bear in mind here that we may need to chmod the /files directory to 777 if we are not using Apache-ITK.
drush @${DEV_SITE_NAME} cache-clear all
drush @${BETA_SITE_NAME} cache-clear all

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Make backup copy of the dev site..."
# -------------------------------------------------------------------------------------------------

mkdir -p ${BACKUP_LOCATION}
mysqldump -u ${DEV_MYSQL_USER} -p${DEV_MYSQL_PASS} ${DEV_MYSQL_DATABASE} > ${BACKUP_LOCATION}${DATE_TIME}_${DEV_MYSQL_DATABASE}.sql
tar --create --file=${BACKUP_LOCATION}${DATE_TIME}_${DEV_SITE_NAME}.tar ${DEV_DOCUMENT_ROOT}

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Make backup copy of the beta site..."
# -------------------------------------------------------------------------------------------------
mysqldump -u ${BETA_MYSQL_USER} -p${BETA_MYSQL_PASS} ${BETA_MYSQL_DATABASE} > ${BACKUP_LOCATION}${DATE_TIME}_${BETA_MYSQL_DATABASE}.sql
tar --create --file=${BACKUP_LOCATION}${DATE_TIME}_${BETA_SITE_NAME}.tar ${BETA_DOCUMENT_ROOT}

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Check local version of the code matches the current SVN version - if it doesn't then the version in SVN has been updated..."
# -------------------------------------------------------------------------------------------------

# Now checking that the revision number of dev's local svn copy matches the repository.  If they don't match then the repository must have been 
# updated by another process. 
# NB - This shouldn't have happened as this script is supposed to run after the script has been run to copy the beta copy over dev - and so the
# revision numbers should match.
# We would need to see where that update come from and what (if any) database changes were made.
# file changes to SVN.

dev_local_revision=$(svn info ${DEV_DOCUMENT_ROOT} | grep '^Revision:' | sed s/^Revision:[[:space:]]*// )

remote_revision=$(svn info ${SVN_URL} | grep '^Revision:' | awk '{print $2}')

if [ "$dev_local_revision" != "$remote_revision" ]
then
    echo "The revision number of the local copy does not match the remote respository version - this needs to be looked into - someone/some process has updated the repository - also check the database."
    exit 0
fi

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Add/Delete locally added and deleted files..."
# -------------------------------------------------------------------------------------------------


echo "Adding all new files to svn control list..."
svn status ${DEV_DOCUMENT_ROOT} | grep "^?" | sed s/^?// | sed s/[[:space:]]*// | xargs -i svn add "{}" 

echo "If files have been deleted then SVN needs to mark them for deletion..."
svn status ${DEV_DOCUMENT_ROOT} | grep "^\!" | sed s/^\!// | sed s/[[:space:]]*// | xargs -i svn delete "{}" 

echo "Committing and deleting the files which have changed in dev..."
svn commit -m "$DATE_TIME - Committing added/changed/deleted data files from ${DEV_SITE_NAME} into repository." ${DEV_DOCUMENT_ROOT}

# Now we will run an update - the reason for this is so the revision number of dev local and
# the repository will match and can therefore be tested before running the next commit from dev.
# I.e. After running this update the revision numbers match.  When running the next test before 
# committing the dev files changes we can check the revision numbers and if they don't match then 
# the repository must have been updated by another process.  This would then need to be investigated.
echo "SVN update the local dev copy to get the revision number to match the repository revision..."
svn update ${DEV_DOCUMENT_ROOT}

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "SVN update beta site files from SVN..."
# -------------------------------------------------------------------------------------------------

ssh beta@localhost "svn update ${BETA_DOCUMENT_ROOT}"

# NB Now we need to chmod permissions on the files/ directory to enable the web server to manipulate
# these files.
sudo chmod -R 777 ${BETA_DOCUMENT_ROOT}/sites/default/files

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Copy database from dev to beta..."
# -------------------------------------------------------------------------------------------------
mysqladmin --force -u ${BETA_MYSQL_USER} -p${BETA_MYSQL_PASS} drop ${BETA_MYSQL_DATABASE}
mysqladmin -u ${BETA_MYSQL_USER} -p${BETA_MYSQL_PASS} create ${BETA_MYSQL_DATABASE}

rm ${BACKUP_LOCATION}sql_sync_dump.sql
drush sql-sync @${DEV_SITE_NAME} @${BETA_SITE_NAME} --no-cache --source-dump=${BACKUP_LOCATION}sql_sync_dump.sql

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Here we will clear out the caches again - this is needed by some modules such as ldap..."
# -------------------------------------------------------------------------------------------------
drush @${DEV_SITE_NAME} cache-clear all
drush @${BETA_SITE_NAME} cache-clear all

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Bring sites online..."
# -------------------------------------------------------------------------------------------------

# These are the D6 commands.
##drush @${DEV_SITE_NAME} vset --always-set site_offline 0
##drush @${BETA_SITE_NAME} vset --always-set site_offline 0

# These commands work for Drupal 7.
drush @${DEV_SITE_NAME} vset maintenance_mode 0 --yes
drush @${BETA_SITE_NAME} vset maintenance_mode 0 --yes


# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished..."
# -------------------------------------------------------------------------------------------------


