#!/bin/bash
#===================================================================================
#
# FILE: pushdevtobeta
#
# USAGE: pushdevtobeta [project type]
#
# DESCRIPTION: This will push the local dev copy up to the beta version.
#
# OPTIONS: see function ’usage’ below
# NOTES: ---
# AUTHOR: Kevin Bailey, kbailey@freewayprojects.com
# COMPANY: Freeway Projects Limited
#===================================================================================

# Make sure only one Pullpush script is running at any one time.
exec 9>/var/lock/pullpush
if ! flock -n 9  ; then
   echo "Another Pullpush script is currently running - try again later.";
   exit 1
fi

# -------------------------------------------------------------------------------------------------
# Set up global variables.
#
# We are going to explicitly set the script name variable.  Obviously the script name is available
# as $0 - but this is not consistent and may or may not contain the path.  Also, this means we can
# use the bash debugger without needing to handle the fact that $0 would contain something like
# 'bashdb'.
# -------------------------------------------------------------------------------------------------
SCRIPT_NAME=pushdevtobeta
DATE_TIME=$(date +%Y%m%d-%H%M%S)

# -------------------------------------------------------------------------------------------------
# Set up the user to be able to run sudo commands - this will be revoked at the end of the script.
# -------------------------------------------------------------------------------------------------
sudo -v

# -------------------------------------------------------------------------------------------------
# Log all output from the script.
# 
# As we are going to be carrying out multiple steps and it is important we can see all the output
# to be able to diagnose problems.
# -------------------------------------------------------------------------------------------------

# Create a place for the log files.
sudo mkdir -p /var/log/pullpush
sudo chmod 777 /var/log/pullpush

# Create a pipe...
tmppipe=$(mktemp -u)
mkfifo ${tmppipe}

# ...then start a tee process which takes as its input the pipe - and output to the logfile (and 
# standard output) and then push the tee process into the background (subshell).
tee < ${tmppipe} /var/log/pullpush/${DATE_TIME}_${USER}_${SCRIPT_NAME}.log &

# Redirect both standard output and standard error to the pipe just created - these outputs
# will then be directed via the pipe to standard output (the current shell) and the log file.
exec &> ${tmppipe}

# This sets up the pipe to be removed - it will only be fully dropped when no process is using it.
rm ${tmppipe}

# -------------------------------------------------------------------------------------------------
# Import Pullpush functions.
# -------------------------------------------------------------------------------------------------
source /usr/local/share/pullpush/pullpush_functions

# -------------------------------------------------------------------------------------------------
# Local functions
#
# Here we will define all the functions used by this script.
# -------------------------------------------------------------------------------------------------

# Output a usage message - used when the parameters input are not correct.
usage () {
  echo "Usage: $SCRIPT_NAME -p [project name]"
}

# -------------------------------------------------------------------------------------------------
# Testing parameters
# -------------------------------------------------------------------------------------------------
while getopts ":p:" opt; do
  case $opt in
    p)
      PROJECT_NAME=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      usage
      exit 1
      ;;
  esac
done

# Check the parameter has had a value assigned.
if [ -z $PROJECT_NAME ]
then
    echo "The project name needs to be set."
    usage
    exit 1
fi

# Check the project exists.
if [ ! -e /home/beta/projects/${PROJECT_NAME}/web ]
then
    echo "The project does not appear to exist."
    usage
    exit 1
fi

# Load the project settings file or display an error if it does not exist.
if [ -e /etc/pullpush/projects/${PROJECT_NAME}.conf ]
then
    source /etc/pullpush/projects/${PROJECT_NAME}.conf
else
    echo "ERROR - The project settings file /etc/pullpush/projects/${PROJECT_NAME}.conf not found."
    exit 1
fi

# Load the configuration file and check it was loaded OK.
__load_configuration_file

if [ $? -ne 0 ]
then
    echo "Configuration file was not loaded."
fi

echo "All tests completed OK."
echo "Project name: ${PROJECT_NAME}"

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Take sites offline..."
# -------------------------------------------------------------------------------------------------

# Future versions of the script will need to pick up if the site is D6 or D7.  It is possible that
# both of these commands can be run on D6 and D7 safely.

# These are the commands for Drupal 6.
# drush @${DEV_SITE_NAME} vset --always-set site_offline 1
# drush @${BETA_SITE_NAME} vset --always-set site_offline 1

# These commands work for Drupal 7.
##drush @${DEV_SITE_NAME} vset maintenance_mode 1 --yes
##drush @${BETA_SITE_NAME} vset maintenance_mode 1 --yes


# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Changing permissions on the files/ directory to enable the script user to be able to work with wwwrun owned files..."
# -------------------------------------------------------------------------------------------------
##sudo chmod -R 777 ${BETA_DOCUMENT_ROOT}/sites/default/files
##sudo chmod -R 777 ${DEV_DOCUMENT_ROOT}/sites/default/files

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Clearing out the caches on the sites to trim the database and files/ before copying..."
# -------------------------------------------------------------------------------------------------
case "${PROJECT_TYPE}" in

    drupal7|drupal6)
	drush --root=/home/${USER}/projects/${PROJECT_NAME}/web cache-clear all
        ;;

    *)
        echo "Error - Invalid project type."
        exit 1
esac

# Bear in mind here that we may need to chmod the /files directory to 777 if we are not using Apache-ITK.
##drush @${DEV_SITE_NAME} cache-clear all
##drush @${BETA_SITE_NAME} cache-clear all

##drush --root=/home/${USER}/projects/${PROJECT_NAME} cache-clear all
##drush --root=/home/beta/web/${PROJECT_NAME} cache-clear all

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Make backup copy of the dev site database to reload later into beta..."
# -------------------------------------------------------------------------------------------------

mkdir -p /home/${USER}/backups/dev_sites
##mysqldump ${USER}${PROJECT_NAME} > /home/${USER}/backups/dev_sites/${PROJECT_NAME}_${DATE_TIME}.sql
mysqldump ${USER}pr${PROJECT_NAME} > /home/${USER}/backups/dev_sites/${USER}pr${PROJECT_NAME}.sql

## We are not going to back up the files as this could get too large and take too long.  Daily 
# server backups should be used if needed.
##tar --create --file=/home/${USER}/backups/dev_sites/${PROJECT_NAME}_${DATE_TIME}.tar /home/${USER}/projects/${PROJECT_NAME}
##tar --create --file=/home/${USER}/backups/dev_sites/${PROJECT_NAME}.tar /home/${USER}/projects/${PROJECT_NAME}/web

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Make backup copy of the beta site..."
# -------------------------------------------------------------------------------------------------
##mysqldump -u ${BETA_MYSQL_USER} -p${BETA_MYSQL_PASS} ${BETA_MYSQL_DATABASE} > ${BACKUP_LOCATION}${DATE_TIME}_${BETA_MYSQL_DATABASE}.sql
##tar --create --file=${BACKUP_LOCATION}${DATE_TIME}_${BETA_SITE_NAME}.tar ${BETA_DOCUMENT_ROOT}


## We are not going to backup the beta site due to time and space considerations.  When pulling 
# from beta to dev there is a complete snapshot made including a database dump.
##mkdir -p /home/${USER}/backups/beta_sites
##sudo mysqldump beta${PROJECT_NAME} > /home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.sql
##sudo tar --create --file=/home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.tar /home/beta/web/${PROJECT_NAME}


# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Check local version of the code matches the current SVN version - if it doesn't then the version in SVN has been updated..."
# -------------------------------------------------------------------------------------------------

# Now checking that the revision number of dev's local svn copy matches the repository.  If they don't match then the repository must have been 
# updated by another process or by another developer pushing up to beta. 
# NB - This shouldn't have happened as this script is supposed to run after the script has been run to pull the dev from beta - and so the
# revision numbers should match.
# We would need to see where that update come from and what (if any) database changes were made.

dev_local_revision=$(svn info /home/${USER}/projects/${PROJECT_NAME}/web | grep '^Revision:' | sed s/^Revision:[[:space:]]*// )
remote_revision=$(svn info http://localhost/svn/${PROJECT_NAME} | grep '^Revision:' | awk '{print $2}')

echo "Current dev_local_revision:${dev_local_revision}"
echo "Current remote_revision:${remote_revision}"

if [ "$dev_local_revision" != "$remote_revision" ]
then
    echo "The revision number of the local copy does not match the remote respository version - this needs to be looked into - someone/some process has updated the repository - also check the database."
    exit 1
fi

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Here we will add a file to make sure that there is at least one file change to check in which will bump up the revision number..."
# -------------------------------------------------------------------------------------------------
echo $(date) > /home/${USER}/projects/${PROJECT_NAME}/web/force_revision_bump.txt

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Add/Delete locally added and deleted files..."
# -------------------------------------------------------------------------------------------------
echo "Adding all new files to svn control list..."
svn status /home/${USER}/projects/${PROJECT_NAME}/web | grep "^?" | sed s/^?// | sed s/[[:space:]]*// | xargs -i svn add "{}" 

echo "If files have been deleted then SVN needs to mark them for deletion..."
svn status /home/${USER}/projects/${PROJECT_NAME}/web | grep "^\!" | sed s/^\!// | sed s/[[:space:]]*// | xargs -i svn delete "{}" 

echo "Committing and deleting the files which have changed in dev..."
svn commit -m "${DATE_TIME} - Committing added/changed/deleted data files from ${USER}-${PROJECT_NAME} into repository." /home/${USER}/projects/${PROJECT_NAME}/web

# Here we will check if the commit ran OK.  This should pick up the return value from the svn command
# but for now we will put in a visual safety check.  In fact this check would be a good idea anyway
# as a safety check.
read -p "Did the commit run OK (y/n)?"
if [ $REPLY != "y" ]; then
        echo "You will need to check why the files can not be commited before running this script again - Exiting..."
        exit 1
fi
echo "Continuing with the script..."

# Now we will run an update - the reason for this is so the revision number of dev local and
# the repository will match and can therefore be tested before running the next commit from dev.
# I.e. After running this update the revision numbers match.  When running the next test before 
# committing the dev files changes we can check the revision numbers and if they don't match then 
# the repository must have been updated by another process.  This would then need to be investigated.
echo "SVN update the local dev copy to get the revision number to match the repository revision..."
svn update /home/${USER}/projects/${PROJECT_NAME}/web

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "SVN update beta site files from SVN..."
# -------------------------------------------------------------------------------------------------

##ssh beta@localhost "svn update /home/beta/web/${PROJECT_NAME}"
sudo -u beta -i "svn update /home/beta/projects/${PROJECT_NAME}/web"

# NB Now we need to chmod permissions on the files/ directory to enable the web server to manipulate
# the files which have just been pulled out from SVN.
if [ "${WEB_SERVER_TYPE}" = "apache2prefork" ]
then
    echo
    echo `date`
    echo "Add the www-data user to the beta group so that the web server can write to the files/ directory..."
    sudo adduser --quiet www-data beta

    echo "Add the beta user to the www-data so the beta user can work with files with SVN etc..."
    sudo adduser --quiet beta www-data

    echo
    echo `date`
    echo "Setting permissions for the files/ directory so the web server can write to it..."
    sudo chmod -R 775 /home/beta/projects/${PROJECT_NAME}/web/sites/default/files
fi

# NB Now we need to chmod permissions on the files/ directory to enable the web server to manipulate
# these files.
##sudo chmod -R 777 ${BETA_DOCUMENT_ROOT}/sites/default/files

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Copy database from dev to beta..."
# -------------------------------------------------------------------------------------------------
##mysqladmin --force -u ${BETA_MYSQL_USER} -p${BETA_MYSQL_PASS} drop ${BETA_MYSQL_DATABASE}
##mysqladmin -u ${BETA_MYSQL_USER} -p${BETA_MYSQL_PASS} create ${BETA_MYSQL_DATABASE}

##rm ${BACKUP_LOCATION}sql_sync_dump.sql
##drush sql-sync @${DEV_SITE_NAME} @${BETA_SITE_NAME} --no-cache --source-dump=${BACKUP_LOCATION}sql_sync_dump.sql

mysqladmin --force drop betapr${PROJECT_NAME}
mysqladmin create betapr${PROJECT_NAME}
mysql betapr${PROJECT_NAME} < /home/${USER}/backups/dev_sites/${USER}pr${PROJECT_NAME}.sql

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Here we will clear out the caches again - this is needed by some modules such as ldap..."
# -------------------------------------------------------------------------------------------------
##drush @${DEV_SITE_NAME} cache-clear all
##drush @${BETA_SITE_NAME} cache-clear all

###drush --root=/home/${USER}/projects/${PROJECT_NAME} cache-clear all
###drush --root=/home/beta/web/${PROJECT_NAME} cache-clear all
# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Clearing out the beta cache to clean it up..."
# -------------------------------------------------------------------------------------------------
case "${PROJECT_TYPE}" in

    drupal7|drupal6)
	drush --root=/home/beta/projects/${PROJECT_NAME}/web cache-clear all
        ;;

    *)
        echo "Error - Invalid project type."
        exit 1
esac

### -------------------------------------------------------------------------------------------------
##echo
##echo `date`
##echo "Bring sites online..."
### -------------------------------------------------------------------------------------------------

# These are the D6 commands.
##drush @${DEV_SITE_NAME} vset --always-set site_offline 0
##drush @${BETA_SITE_NAME} vset --always-set site_offline 0

# These commands work for Drupal 7.
##drush @${DEV_SITE_NAME} vset maintenance_mode 0 --yes
##drush @${BETA_SITE_NAME} vset maintenance_mode 0 --yes

echo "The new revision number for the project is: $(svn info http://localhost/svn/${PROJECT_NAME} | grep '^Revision:' | awk '{print $2}')"

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished..."
# -------------------------------------------------------------------------------------------------

exit 0
