#!/bin/bash
#===================================================================================
#
# FILE: pulldeployfrombeta
#
# USAGE: pulldeployfrombeta -p [project type]
#
# DESCRIPTION: This will pull a copy of a beta site and create a new deploy site.
#
# OPTIONS: see function ’usage’ below
# NOTES: ---
# AUTHOR: Kevin Bailey, kbailey@freewayprojects.com
# COMPANY: Freeway Projects Limited
#===================================================================================

# Make sure only one Pullpush script is running at any one time.
touch /var/lock/pullpush
chmod --quiet 666 /var/lock/pullpush
exec 9>/var/lock/pullpush
if ! flock -n 9  ; then
   echo "Another Pullpush script is currently running - try again later.";
   exit 1
fi

# -------------------------------------------------------------------------------------------------
# Set up global variables.
#
# We are going to explicitly set the script name variable.  Obviously the script name is available
# as $0 - but this is not consistent and may or may not contain the path.  Also, this means we can
# use the bash debugger without needing to handle the fact that $0 would contain something like
# 'bashdb'.
# -------------------------------------------------------------------------------------------------
SCRIPT_NAME=pulldeployfrombeta
DATE_TIME=$(date +%Y%m%d-%H%M%S)

# -------------------------------------------------------------------------------------------------
# Set up the user to be able to run sudo commands - this will be revoked at the end of the script.
# -------------------------------------------------------------------------------------------------
sudo -v

# -------------------------------------------------------------------------------------------------
# Log all output from the script.
# 
# As we are going to be carrying out multiple steps and it is important we can see all the output
# to be able to diagnose problems.
# -------------------------------------------------------------------------------------------------

# Create a place for the log files.
sudo mkdir -p /var/log/pullpush
sudo chmod 777 /var/log/pullpush

# Create a pipe...
tmppipe=$(mktemp -u)
mkfifo ${tmppipe}

# ...then start a tee process which takes as its input the pipe - and output to the logfile (and 
# standard output) and then push the tee process into the background (subshell).
tee < ${tmppipe} /var/log/pullpush/${DATE_TIME}_${USER}_${SCRIPT_NAME}.log &

# Redirect both standard output and standard error to the pipe just created - these outputs
# will then be directed via the pipe to standard output (the current shell) and the log file.
exec &> ${tmppipe}

# This sets up the pipe to be removed - it will only be fully dropped when no process is using it.
rm ${tmppipe}

# -------------------------------------------------------------------------------------------------
# Import Pullpush functions.
# -------------------------------------------------------------------------------------------------
source /usr/local/share/pullpush/pullpush_functions

# -------------------------------------------------------------------------------------------------
# Local functions
#
# Here we will define all the functions used by this script.
# -------------------------------------------------------------------------------------------------

# Output a usage message - used when the parameters input are not correct.
usage () {
    echo "Usage: $SCRIPT_NAME -p [project name]"
}


# -------------------------------------------------------------------------------------------------
# Testing parameters
# -------------------------------------------------------------------------------------------------
while getopts ":p:" opt; do
    case $opt in
	p)
	    PROJECT_NAME=$OPTARG
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	    exit 1
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    exit 1
	    ;;
    esac
done

# Check the parameter has had a value assigned.
if [ -z $PROJECT_NAME ]
then
    echo "The project name needs to be set."
    usage
    exit 1
fi

# Check the project exists.
if [ ! -e /home/beta/projects/${PROJECT_NAME}/web ]
then
    echo "The project does not appear to exist."
    usage
    exit 1
fi

# Load the project settings file or display an error if it does not exist.
if [ -e /etc/pullpush/projects/${PROJECT_NAME}.conf ]
then
    source /etc/pullpush/projects/${PROJECT_NAME}.conf
else
    echo "ERROR - The project settings file /etc/pullpush/projects/${PROJECT_NAME}.conf not found."
    exit 1
fi

# Load the configuration file and check it was loaded OK.
__load_configuration_file

if [ $? -ne 0 ]
then
    echo "Configuration file was not loaded."
fi

echo "All tests completed OK."
echo "Project name: ${PROJECT_NAME}"


# -------------------------------------------------------------------------------------------------
# The plan.
#
# If necessary create the DB.
# Clear the beta caches.
# Backup the beta DB.
# Load the DB from the backup.
# Check beta into SVN.
# Export files from SVN.
# Update/create settings.php
# If necessary create the vhost.
# -------------------------------------------------------------------------------------------------

# Set up the database and database user.
DATABASE_NAME=deploypr${PROJECT_NAME}
DATABASE_USER=deploypr${PROJECT_NAME}
DATABASE_PASSWORD=`cat /dev/urandom | base64 | tr -d '[:punct:]' | tr -d '[:digit:]' | tr -d '[:upper:]' | cut -c1-10 | head -1`

# If necessary create the database - if not then update the user. 
if [ ! -e /home/deploy/projects/${PROJECT_NAME}/web ]
then

    # Set up the vhost.
    __set_up_vhost deploy-pr-${PROJECT_NAME} /home/deploy/projects/${PROJECT_NAME}/web


    echo "Creating database..."
    __create_mysql_database_and_user_account ${DATABASE_NAME} ${DATABASE_USER} ${DATABASE_PASSWORD}
else

    # Here we are going to update the privileges so we have the password in this script and we can add it to the settings file.  
    # Also, it is a good idea to refresh the password to prevent conntecting to the wrong database.
    echo "Updating database user..."
    mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}

fi

# Clear the beta caches.
case "${PROJECT_TYPE}" in

    drupal7|drupal6)
	drush --root=/home/beta/projects/${PROJECT_NAME}/web cache-clear all
        ;;

    *)
        echo "Error - Invalid project type."
        exit 1
esac

# Backup the beta DB.
mkdir -p /home/${USER}/backups/beta_sites
mysqldump betapr${PROJECT_NAME} > /home/${USER}/backups/beta_sites/${PROJECT_NAME}.sql

# Load the DB from the backup.
mysql deploypr${PROJECT_NAME} < /home/${USER}/backups/beta_sites/${PROJECT_NAME}.sql

# Export files from SVN.
sudo -u deploy -i "svn --force export http://localhost/svn/${PROJECT_NAME} /home/deploy/projects/${PROJECT_NAME}/web"

# Create and update the settings file.
case "${PROJECT_TYPE}" in

    drupal7)

	# We will cpoy the file before changing it as changing it in place gets complicated when trying to excape the sudo command.
	cp /home/deploy/projects/${PROJECT_NAME}/web/sites/default/default.settings.php /home/${USER}/settings.php.deploypr${PROJECT_NAME}
	cat <<EOFSETTINGS >> /home/${USER}/settings.php.deploypr${PROJECT_NAME}

\$databases = array (
  'default' => 
  array (
    'default' => 
    array (
      'database' => '${DATABASE_NAME}',
      'username' => '${DATABASE_USER}',
      'password' => '${DATABASE_PASSWORD}',
      'host' => 'localhost',
      'port' => '',
      'driver' => 'mysql',
      'prefix' => '',
    ),
  ),
);

EOFSETTINGS

	sudo -u deploy -i cp /home/${USER}/settings.php.deploypr${PROJECT_NAME} /home/deploy/projects/${PROJECT_NAME}/web/sites/default/settings.php
	rm /home/${USER}/settings.php.deploypr${PROJECT_NAME}
	;;

    drupal6)

	# We will copy the file before changing it as changing it in place gets complicated when trying to excape the sudo command.
	cp /home/deploy/projects/${PROJECT_NAME}/web/sites/default/default.settings.php /home/${USER}/settings.php.deploypr${PROJECT_NAME}
##	echo "\$db_url = 'mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME}'" >> /home/${USER}/settings.php.betapr${PROJECT_NAME}
	echo "\$db_url = 'mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME}';" >> /home/${USER}/settings.php.deploypr${PROJECT_NAME}
	sudo -u deploy -i cp /home/${USER}/settings.php.deploypr${PROJECT_NAME} /home/deploy/projects/${PROJECT_NAME}/web/sites/default/settings.php
	rm /home/${USER}/settings.php.deploypr${PROJECT_NAME}
	;;

    *)
        echo "Error - Invalid project type."
        exit -1
esac

# If necessary create the vhost.
##if [ ! -e /home/deploy/projects/${PROJECT_NAME}/web ]
##then

##    __set_up_vhost deploy-pr-${PROJECT_NAME} /home/deploy/projects/${PROJECT_NAME}/web

##fi

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished - the deploy copy of the site is at http://deploy-pr-${PROJECT_NAME}.${SERVER_FQDN}..."
# -------------------------------------------------------------------------------------------------


exit 0









# pulldeployfrombeta
# Pull deploy from beta

# -------------------------------------------------------------------------------------------------
# Script which will overwrite the deploy site and make it a copy of the beta site.
# -------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
# Logging setup
# -------------------------------------------------------------------------------------------------

# These lines have been copied from http://stackoverflow.com/questions/3173131/redirect-copy-of-stdout-to-log-file-from-within-bash-script-itself
# and will send the script output to a log file.
mkdir -p ~/logs/pullpush
DATE_TIME=`date +%Y%m%d-%H%M%S`
logfile=~/logs/pullpush/pulldeployfrombeta_${DATE_TIME}.log
mkfifo ${logfile}.pipe
tee < ${logfile}.pipe $logfile &
exec &> ${logfile}.pipe
rm ${logfile}.pipe

# -------------------------------------------------------------------------------------------------
# We are going to bring in a parameter which will be used to pull in a file containing values for
# variables - this is to prevent users accidentally using someone elses databases and web space.
# -------------------------------------------------------------------------------------------------



echo
echo `date`
echo "Testing for argument which should be the project name..."
if [ $1 ]
then
    echo "Argument supplied OK as $1"
    echo
else
    echo "ERROR - No argument supplied"
    exit -1
fi

# Set up variables used through this script.
PROJECT_NAME=${1}
DATE_TIME=`date +%Y%m%d-%H%M%S`

# Check the Pullpush configuration file exists.
if [ -e /etc/pullpush/pullpush.conf ]
then
    source /etc/pullpush/pullpush.conf
else
    echo
    echo "ERROR - Pullpush configuration file not found."
    exit -1
fi

# Check the project settings file exists.
if [ -e /etc/pullpush/projects/${PROJECT_NAME}.conf ]
then
    source /etc/pullpush/projects/${PROJECT_NAME}.conf
else
    echo "ERROR - The configuration file /etc/pullpush/projects/${PROJECT_NAME}.conf not found."
    exit -1
fi


##DATE_TIME=`date +%Y%m%d-%H%M%S`

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Take sites offline..."
# -------------------------------------------------------------------------------------------------

# Future versions of the script will need to pick up if the site is D6 or D7.  It is possible that
# both of these commands can be run on D6 and D7 safely.

# NB - this should pick up the PROJECT_TYPE to work out which commands should be used to take the 
# sites off-line.

# These are the commands for Drupal 6.
# drush @${DEV_SITE_NAME} vset --always-set site_offline 1
# drush @${BETA_SITE_NAME} vset --always-set site_offline 1

# These commands work for Drupal 7.
##drush @${BETA_SITE_NAME} vset maintenance_mode 1 --yes
##drush @${DEPLOY_SITE_NAME} vset maintenance_mode 1 --yes

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Changing permissions on the files/ directory to enable the script user to be able to work with wwwrun owned files..."
# -------------------------------------------------------------------------------------------------
##sudo chmod -R 777 ${BETA_DOCUMENT_ROOT}/sites/default/files
##sudo chmod -R 777 ${DEPLOY_DOCUMENT_ROOT}/sites/default/files

# We also need to chmod this directory as the data export import module will have been added by Drush.
##sudo chmod -R 777 ${DEPLOY_DOCUMENT_ROOT}/sites/all/modules

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Clearing out the caches on the sites to trim the database and files/ before copying and backing up..."
# -------------------------------------------------------------------------------------------------

# Bear in mind here that we may need to chmod the /files directory to 777 if we are not using Apache-ITK.

# Clear out the caches on the beta site.  As the deploy copy will become a copy of the beta site we do
# not want to pull down all the caches as well.  
##drush /home/beta/web/${BETA_SITE_NAME} cache-clear all
drush --root=/home/beta/web/${PROJECT_NAME} cache-clear all

# NB - We do not want to clear out the deploy site cache as this deletes directories and this causes the svn 
# revert command to fail.  By the end of this script the deploy copy should be an exact copy of beta and that
# has had the caches cleared.
##drush @${DEV_SITE_NAME} cache-clear all

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Make backup copy of the beta site..."
# -------------------------------------------------------------------------------------------------
##mysqldump -u ${BETA_MYSQL_USER} -p${BETA_MYSQL_PASS} ${BETA_MYSQL_DATABASE} > ${BACKUP_LOCATION}${DATE_TIME}_${BETA_MYSQL_DATABASE}.sql
##tar --create --file=${BACKUP_LOCATION}${DATE_TIME}_${BETA_SITE_NAME}.tar ${BETA_DOCUMENT_ROOT}

mkdir -p /home/${USER}/backups/beta_sites
sudo mysqldump beta${PROJECT_NAME} > /home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.sql
sudo tar --create --file=/home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.tar /home/beta/web/${PROJECT_NAME}

# We will also create an arhive backup which will be used by the Drupal restore methods.
drush --root=/home/beta/web/${PROJECT_NAME} archive-dump --destination=/home/${USER}/backups/beta_sites/${PROJECT_NAME}_archive_${DATE_TIME}.tar

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Checking if the deploy site exists - if it does not then it will be created..."
# -------------------------------------------------------------------------------------------------

if [ ! -e /home/deploy/web/${PROJECT_NAME} ]
then

# Here we will add the vhost.

    case "${SERVER_TYPE}" in

	debian)
	    echo
	    echo `date`
            echo "Set up vhost on Debian."

	# First we need to copy the relevant vhost template file.
	    case ${PROJECT_TYPE} in
		drupal7)
		    echo "Copy the drupal7 vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_drupal7.template /etc/apache2/sites-available/deploy-${PROJECT_NAME}
                    ;;
		drupal6)
		    echo "Copy the drupal6 vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_drupal6.template /etc/apache2/sites-available/deploy-${PROJECT_NAME}
                    ;;
		symfonymysql)
		    echo "Copy the symfonymysql vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_symfonymysql.template /etc/apache2/sites-available/deploy-${PROJECT_NAME}
                    ;;
		phpmysql)
		    echo "Copy the phpmysql vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_phpmysql.template /etc/apache2/sites-available/deploy-${PROJECT_NAME}
                    ;;
		*)
		    echo "Error - Invalid project type when adding a Debian vhost."
		    exit -1
            esac

        # Here we will update the vhost files as necessary.  There may be a more elegant way of doing this. 

            sudo sed -i "s/documentroot/\/home\/deploy\/web\/${PROJECT_NAME}/g" /etc/apache2/sites-available/deploy-${PROJECT_NAME}
            sudo sed -i "s/username/deploy/g" /etc/apache2/sites-available/deploy-${PROJECT_NAME}
            sudo sed -i "s/vhostname/deploy-${PROJECT_NAME}/g" /etc/apache2/sites-available/deploy-${PROJECT_NAME}
            sudo sed -i "s/serverfqdn/${SERVER_FQDN}/g" /etc/apache2/sites-available/deploy-${PROJECT_NAME}
            sudo sed -i "s/serveradminemail/${SERVER_ADMIN_EMAIL}/g" /etc/apache2/sites-available/deploy-${PROJECT_NAME}

            sudo a2ensite deploy-${PROJECT_NAME}
            sudo apache2ctl restart
            ;;
	
	sles)
	    echo
	    echo `date`
            echo "Set up a vhost on SLES."

	    case ${PROJECT_TYPE} in
		drupal7)
		    echo "Copy the drupal7 vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_drupal7.template /etc/apache2/vhosts.d/deploy-${PROJECT_NAME}.conf
                    ;;
		drupal6)
		    echo "Copy the drupal6 vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_drupal6.template /etc/apache2/vhosts.d/deploy-${PROJECT_NAME}.conf
                    ;;
		symfonymysql)
		    echo "Copy the symfonymysql vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_symfonymysql.template /etc/apache2/vhosts.d/deploy-${PROJECT_NAME}.conf
                    ;;
		phpmysql)
		    echo "Copy the phpmysql vhost template..."
		    sudo cp /usr/local/share/pullpush/vhost_phpmysql.template /etc/apache2/vhosts.d/deploy-${PROJECT_NAME}.conf
                    ;;
		*)
		    echo "Error - Invalid project type when adding a SLES vhost."
		    exit -1
            esac

            sudo sed -i "s/documentroot/\/home\/deploy\/web\/${PROJECT_NAME}/g" /etc/apache2/vhosts.d/deploy-${PROJECT_NAME}.conf

            sudo sed -i "s/username/deploy/g" /etc/apache2/vhosts.d/deploy-${PROJECT_NAME}.conf
            sudo sed -i "s/vhostname/deploy-${PROJECT_NAME}/g" /etc/apache2/sites-available/deploy-${PROJECT_NAME}.conf
            sudo sed -i "s/serverfqdn/${SERVER_FQDN}/g" /etc/apache2/vhosts.d/deploy-${PROJECT_NAME}.conf
            sudo sed -i "s/serveradminemail/${SERVER_ADMIN_EMAIL}/g" /etc/apache2/vhosts.d/deploy-${PROJECT_NAME}.conf

            sudo /usr/sbin/rcapache2 restart
            ;;

	*)
            echo "Error - Invalid server type when adding a vhost."
            exit -1
    esac

## Here we will create the database username and password.

# Should possibly use a better tool to generate usernames and passwords - but SLES does not have gpw or pwgen available.
# NB - We need to generate a shortish username to log in to the database as MySQL
# has a limit on database usernames of 16 characters.
# NB - It would be good to put hyphens inbetween the parts of the database name but 
# this causes problems with MySQL.
    DATABASE_NAME=deploy${PROJECT_NAME}
    DATABASE_USER=`cat /dev/urandom | base64 | tr -d '[:punct:]' | tr -d '[:digit:]' | tr -d '[:upper:]' | cut -c1-10 | head -1`
    DATABASE_PASSWORD=`cat /dev/urandom | base64 | tr -d '[:punct:]' | tr -d '[:digit:]' | tr -d '[:upper:]' | cut -c1-10 | head -1`

# -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Create the database for the dev copy of the site..."
# -------------------------------------------------------------------------------------------------
# We will create a database for the Drupal site.  Then, we need to allow the user full access to this database as standard 
# privileges required by Drupal do not seem to allow us the create the initial tables.  We will then change privileges
# to only those needed for Drupal.
    case "${PROJECT_TYPE}" in

	drupal7)
            echo
	    echo `date`
	    echo "This will set up a database for a Drupal 7 site."

        # NB - It is possible to run the 'drush site-install' command and specify the root user for MySQL - but this would expose the
        # MYSQL root user and password to anyone who can read this script - and this might include user accounts which are not in the 
        # wheel group.
	    sudo mysqladmin create ${DATABASE_NAME}
	    sudo mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
            ;;

	drupal6)
            echo
	    echo `date`
	    echo "Setting up a database for a Drupal 6 site..."

        # NB - It is possible to run the 'drush site-install' command and specify the root user for MySQL - but this would expose the
        # MYSQL root user and password to anyone who can read this script - and this might include user accounts which are not in the 
        # wheel group.
	    sudo mysqladmin create ${DATABASE_NAME}
	    sudo mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
            ;;

	symfonymysql)
            echo
	    echo `date`
	    echo "Setting up a database for a symfonymysql site..."

        # Although Symfony does not need a database we will set one up for this project type for the convenience of the developers.
	    sudo mysqladmin create ${DATABASE_NAME}
	    sudo mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
	    echo 
	    echo `date`
	    echo "This is the database name: "
	    echo ${DATABASE_NAME}
	    echo "This is the database user which should be used to access the database: "
	    echo ${DATABASE_USER}
	    echo "This is the database username password: "
	    echo ${DATABASE_PASSWORD}

	    echo "VERY IMPORTANT - Any settings files should be edited to use the deploy site database settings."
            ;;

	phpmysql)
            echo
	    echo `date`
	    echo "Setting up a database for a phpmysql site..."

        # We will set up a database for this project type for the convenience of the developers.
	    sudo mysqladmin create ${DATABASE_NAME}
	    sudo mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
	    echo 
	    echo `date`
	    echo "This is the database name: "
	    echo ${DATABASE_NAME}
	    echo "This is the database user which should be used to access the database: "
	    echo ${DATABASE_USER}
	    echo "This is the database username password: "
	    echo ${DATABASE_PASSWORD}

	    echo "VERY IMPORTANT - Any settings files should be edited to use the deploy site database settings."
            ;;
	
	*)
            echo "Error - Invalid project type."
            exit -1
    esac

# -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Here we will build the deploy site from the archives created earlier..."
# -------------------------------------------------------------------------------------------------

    sudo -u deploy mkdir -p /home/deploy/web
    case "${PROJECT_TYPE}" in

	drupal7)
            echo
	    echo `date`
	    echo "Build the dev site from the Drupal 7 site archive..."
	# NB - We are going to delete all the files and pull them out from the repository again after this initial creation.
        # The advantage of using the archive-restore method is that the settings.php file gets created correctly with the relevant 
        # database settings.
	# I.e. the settings file will contain any tweaks and settings which are in the beta site file but with just the basic 
	# database settings changed.
	    sudo drush archive-restore /home/${USER}/backups/beta_sites/${PROJECT_NAME}_archive_${DATE_TIME}.tar --destination=/home/deploy/web/${PROJECT_NAME} --db-url=mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME}

	    # Set the ownership to deploy.
	    sudo chown -R deploy:deploy /home/deploy/web/${PROJECT_NAME}
            ;;

	drupal6)
            echo
	    echo `date`
	    echo "Build the dev site from the Drupal 6 site archive..."
	# NB - We are going to delete all the files and pull them out from the repository again after this initial creation.
        # The advantage of using the archive-restore method is that the settings.php file gets created correctly with the relevant 
        # database settings.
	# I.e. the settings file will contain any tweaks and settings which are in the beta site file but with just the basic 
	# database settings changed.
	    sudo drush archive-restore /home/${USER}/backups/beta_sites/${PROJECT_NAME}_archive_${DATE_TIME}.tar --destination=/home/deploy/web/${PROJECT_NAME} --db-url=mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME}

	    # Set the ownership to deploy.
	    sudo chown -R deploy:deploy /home/deploy/web/${PROJECT_NAME}
            ;;

	symfonymysql)
            echo
	    echo `date`
	    echo "Build the dev site from the symfonymysql site archive..."
	    sudo tar -x --file=/home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.tar --directory=/home/deploy/web/${PROJECT_NAME} --strip-components=3
	    sudo mysql ${DATABASE_NAME} < /home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.sql

	    # Set the ownership to ${USER}
	    sudo chown -R deploy:deploy /home/deploy/web/${PROJECT_NAME}
            ;;

	phpmysql)
            echo
	    echo `date`
	    echo "Build the dev site from the phpmysql site archive..."
	    sudo tar -x --file=/home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.tar --directory=/home/deploy/web/${PROJECT_NAME} --strip-components=3
	    sudo mysql ${DATABASE_NAME} < /home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.sql

	    # Set the ownership to deploy.
	    sudo chown -R deploy:deploy /home/deploy/projects/${PROJECT_NAME}
            ;;
	
	*)
            echo "Error - Invalid project type."
            exit -1
    esac

    # Here we will clean out the files and replace them with files from the repository.
    # The site was initially rebuilt from an archive backup to ensure the settings file was created properly.  We 
    # are going to keep a safe copy of the settings file.  The other files will be deleted and pulled out from 
    # the SVN repository.  This means that all code is always transferred via the code repository and so is 
    # safely versioned.

# -------------------------------------------------------------------------------------------------
# First we need to check in the files from the beta copy to make sure the repository is up-to-date.
# -------------------------------------------------------------------------------------------------


# As part of the first step in getting the dev copy up-to-date with the latest beta is to get all 
# beta files checked into SVN

# The only file changes this should pick up are the new data files which are in sites/default/files.  First we are 
# going to output the changes to files/ and / and make sure they match.  If they don't match then there are non-data
# files/directories which have been changed in the Drupal part of the site which needs to be looked into

# NB - The output from the status commands needs to be sorted as lines are not always output in the same order.

    beta_svn_status_of_whole_site=$(svn -u status /home/beta/web/${PROJECT_NAME} | sort)
    beta_svn_status_of_files_directory=$(svn -u status /home/beta/web/${PROJECT_NAME}/sites/default/files | sort)

    echo "beta_svn_status_of_whole_site: ${beta_svn_status_of_whole_site}"
    echo "beta_svn_status_of_files_directory: ${beta_svn_status_of_files_directory}"

    if [ "$beta_svn_status_of_whole_site" != "$beta_svn_status_of_files_directory" ]
    then
	echo "The beta site files has files which have been modified which are not in the files/ directory - this needs to be looked into."
	exit -1
    fi

# Now checking that the revision number of beta's local svn copy matches the repository.  If they don't match then the repository must have been 
# updated by another process.  We would need to see where that update come from and what (if any) database changes were made.
# file changes to SVN.
    beta_local_revision=$(svn info /home/beta/web/${PROJECT_NAME} | grep '^Revision:' | sed s/^Revision:[[:space:]]*// )

# Trying to get revision without authentication details.
####remote_revision=$(svn --username kevinb --password xxxxxxxx info http://svn.chalfont.ssvc.com/Technology/Websites/radio-v2 | grep '^Revision:' | awk '{print $2}')
    remote_revision=$(svn info http://localhost/svn/${PROJECT_NAME} | grep '^Revision:' | awk '{print $2}')

    echo "beta_local_revision: ${beta_local_revision}"
    echo "remote_revision: ${remote_revision}"

    if [ "$beta_local_revision" != "$remote_revision" ]
    then
	echo "The revision number of the local copy does not match the remote respository version - this needs to be looked into - someone/some process has updated the repository which needs to be checked - also, check for any database changes?"
	exit 0
    fi

# -------------------------------------------------------------------------------------------------
# OK, we've finished the checks - now lets commit the changes to beta files/ to the repository.  We will first svn add/delete 
# files as necessary.
# -------------------------------------------------------------------------------------------------

# NB - We could run the 'svn status' on just the files directory - but this should not be necessary as the previous checks are supposed to 
# check that only file/dirs in files/ have changed.  We'll leave the 'svn status' to pick up all changes because at least the site will
# be an exact copy of beta and the output on the command line will show all file changes.

    echo "Adding all new files to svn control list..."
## ssh beta@localhost "svn status ${BETA_DOCUMENT_ROOT} | grep \"^?\" | sed s/^?// | sed s/[[:space:]]*// | xargs -i svn add \"{}\"" 
    sudo -u beta sh -c "svn status /home/beta/web/${PROJECT_NAME} | grep \"^?\" | sed s/^?// | sed s/[[:space:]]*// | xargs -i svn add \"{}\"" 

    echo "If files have been deleted then SVN needs to mark them for deletion..."
## ssh beta@localhost "svn status ${BETA_DOCUMENT_ROOT} | grep \"^\!\" | sed s/^\!// | sed s/[[:space:]]*// | xargs -i svn delete \"{}\""
    sudo -u beta sh -c "svn status /home/beta/web/${PROJECT_NAME} | grep \"^\!\" | sed s/^\!// | sed s/[[:space:]]*// | xargs -i svn delete \"{}\""

    echo "Committing and deleting the files which have changed in the beta files/ directory..."
##ssh beta@localhost "svn commit -m \"$DATE_TIME - Committing added/changed/deleted data files from beta into repository.\" ${BETA_DOCUMENT_ROOT} "
    sudo -u beta sh -c "svn commit -m \"${DATE_TIME} - Committing added/changed/deleted data files from beta into repository.\" /home/beta/web/${PROJECT_NAME} "

# Now we will run an update - the reason for this is so the revision number of beta local and
# the repository will match and can therefore be tested before running the next commit from beta.
# I.e. After running this update the revision numbers match.  When running the next test before 
# committing the beta files/ changes we can check the revision numbers and if they don't match then 
# the repository must have been updated by another process.  This would then need to be investigated.
    echo "SVN update the local beta copy to get the revision number to match the repository revision..."
    ##ssh beta@localhost "svn update ${BETA_DOCUMENT_ROOT}"
    sudo -u beta sh -c "svn update /home/beta/web/${PROJECT_NAME}"

# -----------------------------------------------------------------------------------------------------------------
# Now we will make a safe copy of the Drupal settings file, delete the current files and then pull the latest files
# from Subversion.
# -----------------------------------------------------------------------------------------------------------------

    case "${PROJECT_TYPE}" in

	drupal7)

            # Make a safe copy of the settings file.
	    cp /home/deploy/web/${PROJECT_NAME}/sites/default/settings.php /home/${USER}/settings.php.deploy.${PROJECT_NAME}

            # Remove the files which were created from the archive.
	    sudo chmod -R 777 /home/deploy/web/${PROJECT_NAME}/sites/default
	    sudo rm -rf /home/deploy/web/${PROJECT_NAME}/*
            # This is used to remove the hidden (dot) files.
	    sudo rm -rf /home/deploy/web/${PROJECT_NAME}/.??*
	    sudo rmdir /home/deploy/web/${PROJECT_NAME}

            # Pull the files from the repository.
	    sudo -u deploy sh -c "svn checkout http://localhost/svn/${PROJECT_NAME} /home/deploy/web/${PROJECT_NAME}"

            # Copy back in the settings file.
	    sudo -u deploy cp /home/${USER}/settings.php.deploy.${PROJECT_NAME} /home/deploy/web/${PROJECT_NAME}/sites/default/settings.php
	    ;;

	drupal6)

            # Make a safe copy of the settings file.
	    cp /home/deploy/web/${PROJECT_NAME}/sites/default/settings.php /home/${USER}/settings.php.deploy.${PROJECT_NAME}

            # Remove the files which were created from the archive.
	    sudo chmod -R 777 /home/deploy/web/${PROJECT_NAME}/sites/default
	    sudo rm -rf /home/deploy/web/${PROJECT_NAME}/*
            # This is used to remove the hidden (dot) files.
	    sudo rm -rf /home/deploy/web/${PROJECT_NAME}/.??*
	    sudo rmdir /home/deploy/web/${PROJECT_NAME}

            # Pull the files from the repository.
	    sudo -u deploy sh -c "svn checkout http://localhost/svn/${PROJECT_NAME} /home/deploy/web/${PROJECT_NAME}"

            # Copy back in the settings file.
	    sudo -u deploy cp /home/${USER}/settings.php.deploy.${PROJECT_NAME} /home/deploy/web/${PROJECT_NAME}/sites/default/settings.php
	    ;;

	symfonymysql)

            # Remove the files which were created from the archive.
	    sudo rm -rf /home/deploy/web/${PROJECT_NAME}/*
            # This is used to remove the hidden (dot) files.
	    sudo rm -rf /home/deploy/web/${PROJECT_NAME}/.??*
	    sudo rmdir /home/deploy/web/${PROJECT_NAME}

            # Pull the files from the repository.
	    sudo -u deploy sh -c "svn checkout http://localhost/svn/${PROJECT_NAME} /home/deploy/web/${PROJECT_NAME}"
	    ;;

	phpmysql)

            # Remove the files which were created from the archive.
	    sudo rm -rf /home/deploy/web/${PROJECT_NAME}/*
            # This is used to remove the hidden (dot) files.
	    sudo rm -rf /home/deploy/web/${PROJECT_NAME}/.??*
	    sudo rmdir /home/deploy/web/${PROJECT_NAME}

            # Pull the files from the repository.
	    sudo -u deploy sh -c "svn checkout http://localhost/svn/${PROJECT_NAME} /home/deploy/web/${PROJECT_NAME}"
	    ;;

	*)
            echo "Error - Invalid project type."
            exit -1
    esac

    echo "A new deploy copy has been created and it is located at: http://deploy-${PROJECT_NAME}.${SERVER_FQDN}"

else

# -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Make backup copy of the deploy site..."
# -------------------------------------------------------------------------------------------------
    mkdir -p /home/${USER}/backups/deploy_backups
# mysqldump -u ${DEPLOY_MYSQL_USER} -p${DEPLOY_MYSQL_PASS} ${DEPLOY_MYSQL_DATABASE} > ${BACKUP_LOCATION}${DATE_TIME}_${DEPLOY_MYSQL_DATABASE}.sql
# tar --create --file=${BACKUP_LOCATION}${DATE_TIME}_${DEPLOY_SITE_NAME}.tar ${DEPLOY_DOCUMENT_ROOT}

    sudo mysqldump deploy${PROJECT_NAME} > /home/${USER}/backups/deploy_backups/${PROJECT_NAME}_${DATE_TIME}.sql
    tar --create --file=/home/${USER}/backups/deploy_backups/${PROJECT_NAME}_${DATE_TIME}.tar /home/deploy/web/${PROJECT_NAME}

# -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Revert current deploy files to to latest revision in the SVN repository..."
# -------------------------------------------------------------------------------------------------
# Maybe here we can clear out any cache/temp files.
# Maybe before reverting we could maybe rename modified files.

# Here we are going to revert all local files so we can update from SVN without conflicts.

# NB - RE deleted direcotries
# 'svn revert' will not revert deleted directories - but if there are any deleted directories then
# they should show up in the 'svn status' output check which is run next.  They should show if they 
# were deleted using rmdir or via 'svn delete'.
#ssh deploy@localhost "svn revert --recursive ${DEPLOY_DOCUMENT_ROOT}"
    sudo -u deploy sh -c "svn revert --recursive /home/deploy/web/${PROJECT_NAME}"

# We are going to check the current svn status of the local deploy repository.
# Due to the revert command which has just been run there sould be no modified files.

# Here we are removing any extra files.  Errors may be caused if users have added files to deploy which
# have the same name as any files which are being added from the beta copy.
    sudo -u deploy sh -c "svn status /home/deploy/web/${PROJECT_NAME} | grep \"^?\" | sed s/^?// | sed s/[[:space:]]*// | xargs -r rm -r"

# The --quiet option tells 'svn status' to not output names of files which are not under
# version control.
    deploy_svn_status=$(svn --quiet status /home/deploy/web/${PROJECT_NAME})

# If there was any output then we want to stop the script so the user can check changes.
    if [ -n "$deploy_svn_status" ]
    then
	echo "There are modified files/directories in the deploy version which have not been reverted - run 'svn status' and check the modified files."
	exit 0
    fi

# -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Commit all the current beta files to SVN..."
# -------------------------------------------------------------------------------------------------
# As part of the first step in getting the deploy copy up-to-date with the latest beta is to get all 
# beta files checked into SVN

# The only file changes this should pick up are the new data files which are in sites/default/files.  First we are 
# going to output the changes to files/ and / and make sure they match.  If they don't match then there are non-data
# files/directories which have been changed in the Drupal part of the site which needs to be looked into

# NB - The output from the status commands needs to be sorted as lines are not always output in the same order.

    beta_svn_status_of_whole_site=$(svn -u status /home/beta/web/${PROJECT_NAME} | sort)
    beta_svn_status_of_files_directory=$(svn -u status /home/beta/web/${PROJECT_NAME}/sites/default/files | sort)

    if [ "$beta_svn_status_of_whole_site" != "$beta_svn_status_of_files_directory" ]
    then
	echo "The beta site files has files which have been modified which are not in the files/ directory - this needs to be looked into."
	exit 0
    fi

# Now checking that the revision number of beta's local svn copy matches the repository.  If they don't match then the repository must have been 
# updated by another process.  We would need to see where that update come from and what (if any) database changes were made.
# file changes to SVN.
    beta_local_revision=$(svn info /home/beta/web/${PROJECT_NAME} | grep '^Revision:' | sed s/^Revision:[[:space:]]*// )

# Trying to get revision without authentication details.
####remote_revision=$(svn --username kevinb --password xxxxxxxx info http://svn.chalfont.ssvc.com/Technology/Websites/radio-v2 | grep '^Revision:' | awk '{print $2}')
    remote_revision=$(svn info http://localhost/svn/${PROJECT_NAME} | grep '^Revision:' | awk '{print $2}')

    if [ "$beta_local_revision" != "$remote_revision" ]
    then
	echo "The revision number of the local copy does not match the remote respository version - this needs to be looked into - someone/some process has updated the repository which needs to be checked - also, check for any database changes?"
	exit 0
    fi

# -------------------------------------------------------------------------------------------------
# OK, we've finished the checks - now lets commit the changes to beta files/ to the repository.  We will first svn add/delete 
# files as necessary.
# -------------------------------------------------------------------------------------------------

# NB - We could run the 'svn status' on just the files directory - but this should not be necessary as the previous checks are supposed to 
# check that only file/dirs in files/ have changed.  We'll leave the 'svn status' to pick up all changes because at least the site will
# be an exact copy of beta and the output on the command line will show all file changes.

    echo "Adding all new files to svn control list..."
##ssh beta@localhost "svn status ${BETA_DOCUMENT_ROOT} | grep \"^?\" | sed s/^?// | sed s/[[:space:]]*// | xargs -i svn add \"{}\"" 
    sudo -u beta sh -c "svn status /home/beta/web/${PROJECT_NAME} | grep \"^?\" | sed s/^?// | sed s/[[:space:]]*// | xargs -i svn add \"{}\"" 

    echo "If files have been deleted then SVN needs to mark them for deletion..."
##ssh beta@localhost "svn status ${BETA_DOCUMENT_ROOT} | grep \"^\!\" | sed s/^\!// | sed s/[[:space:]]*// | xargs -i svn delete \"{}\"" 
    sudo -u beta sh -c "svn status /home/beta/web/${PROJECT_NAME} | grep \"^\!\" | sed s/^\!// | sed s/[[:space:]]*// | xargs -i svn delete \"{}\"" 

    echo "Committing and deleting the files which have changed in the beta files/ directory..."
##ssh beta@localhost "svn commit -m \"$DATE_TIME - Committing added/changed/deleted data files from beta into repository.\" ${BETA_DOCUMENT_ROOT} "
    sudo -u beta sh -c "svn commit -m \"${DATE_TIME} - Committing added/changed/deleted data files from beta into repository.\" /home/beta/web/${PROJECT_NAME} "

# Now we will run an update - the reason for this is so the revision number of beta local and
# the repository will match and can therefore be tested before running the next commit from beta.
# I.e. After running this update the revision numbers match.  When running the next test before 
# committing the beta files/ changes we can check the revision numbers and if they don't match then 
# the repository must have been updated by another process.  This would then need to be investigated.
    echo "SVN update the local beta copy to get the revision number to match the repository revision..."
##ssh beta@localhost "svn update ${BETA_DOCUMENT_ROOT}"
    sudo -u beta sh -c "svn update /home/beta/web/${PROJECT_NAME}"

# -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Checkout latest SVN files to deploy..."
# -------------------------------------------------------------------------------------------------
# This gets the deploy files to be a match for what is in the repository which has just been updated 
# with the files from beta.  There may be some local files which are not in SVN and certain other
# files such as settings.php and some cache files which may be different on local as well.

sudo -u deploy sh -c "svn update /home/deploy/web/${PROJECT_NAME}"

# NB Now we need to chmod permissions on the files/ directory to enable the web server to manipulate
# these files.
##sudo chmod -R 777 ${DEPLOY_DOCUMENT_ROOT}/sites/default/files

# -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Copy beta database on to deploy..."
# -------------------------------------------------------------------------------------------------
# NB the source dump file is put on to danni.
##rm ${BACKUP_LOCATION}sql_sync_dump.sql

##mysqladmin --force -u ${DEPLOY_MYSQL_USER} -p${DEPLOY_MYSQL_PASS} drop ${DEPLOY_MYSQL_DATABASE}
##mysqladmin -u ${DEPLOY_MYSQL_USER} -p${DEPLOY_MYSQL_PASS} create ${DEPLOY_MYSQL_DATABASE}

##drush sql-sync @${BETA_SITE_NAME} @${DEPLOY_SITE_NAME} --no-cache --source-dump=${BACKUP_LOCATION}sql_sync_dump.sql

sudo mysqladmin --force drop deploy${PROJECT_NAME}
sudo mysqladmin create deploy${PROJECT_NAME}

sudo mysql deploy${PROJECT_NAME} < /home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.sql

fi


# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Bring sites online..."
# -------------------------------------------------------------------------------------------------
###drush @${DEV_SITE_NAME} vset --always-set site_offline 0
###drush @${BETA_SITE_NAME} vset --always-set site_offline 0

# These commands work for Drupal 7.
##drush @${DEPLOY_SITE_NAME} vset maintenance_mode 0 --yes
##drush @${BETA_SITE_NAME} vset maintenance_mode 0 --yes



# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished."
# -------------------------------------------------------------------------------------------------
exit 0
