#!/bin/bash
#===================================================================================
#
# FILE: pulldevfrombeta
#
# USAGE: pulldevfrombeta -p [project type]
#
# DESCRIPTION: This will pull a copy of a beta site to a dev copy.
#
# OPTIONS: see function ’usage’ below
# NOTES: ---
# AUTHOR: Kevin Bailey, kbailey@freewayprojects.com
# COMPANY: Freeway Projects Limited
#===================================================================================

# Make sure only one Pullpush script is running at any one time.
touch /var/lock/pullpush
chmod --quiet 666 /var/lock/pullpush
exec 9>/var/lock/pullpush
if ! flock -n 9  ; then
   echo "Another Pullpush script is currently running - try again later.";
   exit 1
fi

# -------------------------------------------------------------------------------------------------
# Set up global variables.
#
# We are going to explicitly set the script name variable.  Obviously the script name is available
# as $0 - but this is not consistent and may or may not contain the path.  Also, this means we can
# use the bash debugger without needing to handle the fact that $0 would contain something like
# 'bashdb'.
# -------------------------------------------------------------------------------------------------
SCRIPT_NAME=pulldevfrombeta
DATE_TIME=$(date +%Y%m%d-%H%M%S)

# -------------------------------------------------------------------------------------------------
# Set up the user to be able to run sudo commands - this will be revoked at the end of the script.
# -------------------------------------------------------------------------------------------------
sudo -v

# -------------------------------------------------------------------------------------------------
# Log all output from the script.
# 
# As we are going to be carrying out multiple steps and it is important we can see all the output
# to be able to diagnose problems.
# -------------------------------------------------------------------------------------------------

# Create a place for the log files.
sudo mkdir -p /var/log/pullpush
sudo chmod 777 /var/log/pullpush

# Create a pipe...
tmppipe=$(mktemp -u)
mkfifo ${tmppipe}

# ...then start a tee process which takes as its input the pipe - and output to the logfile (and 
# standard output) and then push the tee process into the background (subshell).
tee < ${tmppipe} /var/log/pullpush/${DATE_TIME}_${USER}_${SCRIPT_NAME}.log &

# Redirect both standard output and standard error to the pipe just created - these outputs
# will then be directed via the pipe to standard output (the current shell) and the log file.
exec &> ${tmppipe}

# This sets up the pipe to be removed - it will only be fully dropped when no process is using it.
rm ${tmppipe}

# -------------------------------------------------------------------------------------------------
# Import Pullpush functions.
# -------------------------------------------------------------------------------------------------
source /usr/local/share/pullpush/pullpush_functions

# -------------------------------------------------------------------------------------------------
# Local functions
#
# Here we will define all the functions used by this script.
# -------------------------------------------------------------------------------------------------

# Output a usage message - used when the parameters input are not correct.
usage () {
    echo "Usage: $SCRIPT_NAME -p [project name] -s [softlock (yes|no)]"
}


# -------------------------------------------------------------------------------------------------
# Testing parameters
# -------------------------------------------------------------------------------------------------
while getopts ":p:s:" opt; do
    case $opt in
	p)
	    PROJECT_NAME=$OPTARG
	    ;;
	s)
	    SOFTLOCK=$OPTARG
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	    exit 1
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    exit 1
	    ;;
    esac
done

# Check the parameter has had a value assigned.
if [ -z $PROJECT_NAME ]
then
    echo "The project name needs to be set."
    usage
    exit 1
fi

# Check the project exists.
if [ ! -e /home/beta/projects/${PROJECT_NAME}/web ]
then
    echo "The project does not appear to exist."
    usage
    exit 1
fi

# Check the softlock value has been set
if [ -z $SOFTLOCK ]
then
    echo "The softlock parameter needs to be set."
    usage
    exit 1
fi

if [ $SOFTLOCK != "yes" ] && [ $SOFTLOCK != "no" ] 
then
    echo "The softlock parameter needs to be set to either 'yes' or 'no'."
    usage
    exit 1
fi

# Load the project settings file or display an error if it does not exist.
if [ -e /etc/pullpush/projects/${PROJECT_NAME}.conf ]
then
    source /etc/pullpush/projects/${PROJECT_NAME}.conf
else
    echo "ERROR - The project settings file /etc/pullpush/projects/${PROJECT_NAME}.conf not found."
    exit 1
fi

# Load the configuration file and check it was loaded OK.
__load_configuration_file

if [ $? -ne 0 ]
then
    echo "Configuration file was not loaded."
fi

echo "All tests completed OK."
echo "Project name: ${PROJECT_NAME}"

# -------------------------------------------------------------------------------------------------
# Here we will look to see if the softlock has been set - if it has then we need to warn the user and
# give them chance to cancel the pull.
# -------------------------------------------------------------------------------------------------
case "${PROJECT_TYPE}" in

    drupal7)

	MAINTENANCE_MODE=$(drush --root=/home/beta/projects/${PROJECT_NAME}/web vget maintenance_mode --exact)
	case "${MAINTENANCE_MODE}" in

	    "maintenance_mode: 1")
		echo "The beta site is currently in maintenance mode which indicates that a dev has pulled a copy and set the softlock."
		echo "You can still pull a copy of the beta site to your dev copy but if you push changes you may prevent another developer from pushing updates."

		read -p "Do you still want to pull a copy of beta to your dev copy (y/n)?"
		if [ $REPLY != "y" ]; then
		    echo "Cancelling pull from beta..."
		    exit 1
		fi
		echo "Continuing with the pull from beta..."
		;;

	    "maintenance_mode: 0")
		echo "The site is not in maintenance mode."
		;;

	    *)
		echo "ERROR - can not determine maintenance mode."
		exit 1
	esac
        ;;


    drupal6)

	SITE_OFFLINE=$(drush --root=/home/beta/projects/${PROJECT_NAME}/web vget site_offline --exact)
	case "${SITE_OFFLINE}" in

	    "site_offline: 1")
		echo "The beta site is currently in offline mode which indicates that a dev has pulled a copy and set the softlock."
		echo "You can still pull a copy of the beta site to your dev copy but if you push changes you may prevent another developer from pushing updates."

		read -p "Do you still want to pull a copy of beta to your dev copy (y/n)?"
		if [ $REPLY != "y" ]; then
		    echo "Cancelling pull from beta..."
		    exit 1
		fi
		echo "Continuing with the pull from beta..."
		;;

	    "site_offline: 0")
		echo "The site is not in offline mode."
		;;

	    *)
		echo "ERROR - can not determine maintenance mode."
		exit 1
	esac
        ;;

    *)
        echo "Error - Invalid project type."
        exit 1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Before working with the beta site we will clear out the caches..."
# -------------------------------------------------------------------------------------------------
case "${PROJECT_TYPE}" in

    drupal7|drupal6)
	drush --root=/home/beta/projects/${PROJECT_NAME}/web cache-clear all
        ;;

    *)
        echo "Error - Invalid project type."
        exit 1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Make backup copy of the beta site database..."
# -------------------------------------------------------------------------------------------------
mkdir -p /home/${USER}/backups/beta_sites
mysqldump betapr${PROJECT_NAME} > /home/${USER}/backups/beta_sites/${PROJECT_NAME}.sql
##tar --create --file=/home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.tar /home/beta/projects/${PROJECT_NAME}/web

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Here we will set or unset the softlock ..."
# -------------------------------------------------------------------------------------------------
case "${PROJECT_TYPE}" in

    drupal7)

	case "${SOFTLOCK}" in

	    yes)
		echo "The softlock is being turned on..."
		drush -r /home/beta/projects/${PROJECT_NAME}/web vset maintenance_mode 1 --yes
		;;

	    no)
		echo "The softlock is being turned off..."
		drush -r /home/beta/projects/${PROJECT_NAME}/web vset maintenance_mode 0 --yes
		;;

	    *)
		echo "Error - Invalid softlock choice."
		exit 1
	esac
        ;;

    drupal6)

	case "${SOFTLOCK}" in

	    yes)
		echo "The softlock is being turned on..."
		drush -r /home/beta/projects/${PROJECT_NAME}/web vset site_offline 1 --yes
		;;

	    no)
		echo "The softlock is being turned off..."
		drush -r /home/beta/projects/${PROJECT_NAME}/web vset site_offline 0 --yes
		;;

	    *)
		echo "Error - Invalid softlock choice."
		exit 1
	esac
        ;;

    *)
        echo "Error - Invalid project type."
        exit 1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Checking if the dev site exists - if not then it will be created as a copy of beta ..."
# -------------------------------------------------------------------------------------------------
if [ ! -e /home/${USER}/projects/${PROJECT_NAME}/web ]
then
    # In this block we are going to:
    # 1. Check beta files into SVN
    # 
    # 1. Create a DB for the dev site.
    # 2. Load the database from the beta database backup.
    # 3. Checkout files from SVN.
    # 4. Update settings.php with the database settings.
    # 5. Set up vhost

    echo "The dev site does not exist so it is being created..."

    echo "Checking the beta site files into SVN..."
    __check_beta_files_into_svn

    echo "Creating database..."
    DATABASE_NAME=${USER}pr${PROJECT_NAME}
    DATABASE_USER=${USER}pr${PROJECT_NAME}
    DATABASE_PASSWORD=`cat /dev/urandom | base64 | tr -d '[:punct:]' | tr -d '[:digit:]' | tr -d '[:upper:]' | cut -c1-10 | head -1`
    __create_mysql_database_and_user_account ${DATABASE_NAME} ${DATABASE_USER} ${DATABASE_PASSWORD}

    echo "Loading the database from the beta database backup..."
    mysql ${USER}pr${PROJECT_NAME} < /home/${USER}/backups/beta_sites/${PROJECT_NAME}.sql

    echo "Checking out the files from SVN to the new dev site..."
    svn checkout http://localhost/svn/${PROJECT_NAME} /home/${USER}/projects/${PROJECT_NAME}/web

    if [ "${WEB_SERVER_TYPE}" = "apache2prefork" ]
    then
	echo
	echo `date`
	echo "Add the www-data user to the developers group so that the web server can write to the files/ directory..."
	sudo adduser --quiet www-data ${USER}

	echo "Adding the dev user to the www-data group so that the dev user can manipulate the files with SVN..."
	sudo adduser --quiet ${USER} www-data

	echo
	echo `date`
	echo "Setting permissions for the files/ directory so the web server can write to it..."
	sudo chmod -R 775 /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/files
    fi
    
    echo "Update settings.php with the database settings..."
    # NB - We are going to base the settings file on default.settings.php.  Any modifications to the 
    # settings.php file which are not database settings should be applied to the default.settings.php
    # file so that other developers get the same base settings.php.
    cp /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/default.settings.php /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/settings.php

    case "${PROJECT_TYPE}" in

	drupal7)

	    cat <<EOFSETTINGS >> /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/settings.php

\$databases = array (
  'default' => 
  array (
    'default' => 
    array (
      'database' => '${DATABASE_NAME}',
      'username' => '${DATABASE_USER}',
      'password' => '${DATABASE_PASSWORD}',
      'host' => 'localhost',
      'port' => '',
      'driver' => 'mysql',
      'prefix' => '',
    ),
  ),
);

EOFSETTINGS

	    ;;

	drupal6)

	    echo "\$db_url = 'mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME}';" >> /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/settings.php
	    ;;

	*)
            echo "Error - Invalid project type."
            exit 1
    esac

    echo "Setting up the vhost..."
    __set_up_vhost ${USER}-pr-${PROJECT_NAME} /home/${USER}/projects/${PROJECT_NAME}/web

else
    echo "The dev copy of the site already exists so we will update it..."

    # Before first we will check beta files into SVN.
    # First we will revert the files.
    # Then we will update the files from the repository.
    # Then we will overwrite the developer database with the beta database.
    
    echo "Checking the beta site files into SVN..."
    __check_beta_files_into_svn

    echo "Reverting the current dev files to to latest revision in the SVN repository..."
    # Todo - Maybe here we can clear out any cache/temp files.
    # Todo - Maybe before reverting we could maybe rename modified files.

    # Here we are going to revert all local files so we can update from SVN without conflicts.

    # NB - RE deleted directories
    # 'svn revert' will not revert deleted directories - but if there are any deleted directories then
    # they should show up in the 'svn status' output check which is run next.  They should show if they 
    # were deleted using rmdir or via 'svn delete'.
    svn revert --recursive /home/${USER}/projects/${PROJECT_NAME}/web

    # We are going to check the current svn status of the local dev repository.
    # Due to the revert command which has just been run there sould be no modified files.

    # Here we are removing any extra files.  Errors may be caused if users have added files to beta which
    # have the same name as any files which are being added by the developer - so it is necessary to remove
    # the files from the developers copy before pulling down the new beta files.
    svn status /home/${USER}/projects/${PROJECT_NAME}/web | grep "^?" | sed s/^?// | sed s/[[:space:]]*// | xargs -r rm -r

    # The --quiet option tells 'svn status' to not output names of files which are not under
    # version control.
    dev_svn_status=$(svn --quiet status /home/${USER}/projects/${PROJECT_NAME}/web)

    # If there was any output then we want to stop the script so the user can check changes.
    if [ -n "$dev_svn_status" ]
    then
	echo "There are modified files/directories in your dev version which have not been reverted - run 'svn status' and check the modified files."
	exit 0
    fi


    # -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Checkout latest SVN files to dev..."
    # -------------------------------------------------------------------------------------------------
    # This gets the dev files to be a match for what is in the repository which has just been updated 
    # with the files from beta.  There may be some local files which are not in SVN and certain other
    # files such as settings.php and some cache files which may be different on local as well.
    svn update /home/${USER}/projects/${PROJECT_NAME}/web

    # SVN pulls the files out with standard ownership and permissions - for Apache Prefork we need
    # to set the permissions to allow the web server to work with the files/ directory.
    if [ "${WEB_SERVER_TYPE}" = "apache2prefork" ]
    then
	echo
	echo `date`
	echo "Add the www-data user to the developers group so that the web server can write to the files/ directory..."
	sudo adduser --quiet www-data ${USER}

	echo "Adding the dev user to the www-data group so that the dev user can manipulate the files with SVN..."
	sudo adduser --quiet ${USER} www-data

	echo
	echo `date`
	echo "Setting permissions for the files/ directory so the web server can write to it..."
	sudo chmod -R 775 /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/files
    fi

    echo "Copy beta database on to dev..."
    mysqladmin --force drop ${USER}pr${PROJECT_NAME}
    mysqladmin create ${USER}pr${PROJECT_NAME}
    mysql ${USER}pr${PROJECT_NAME} < /home/${USER}/backups/beta_sites/${PROJECT_NAME}.sql

fi

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Here we will clear out caches - this avoids issues and keeps the sizes down..."
# -------------------------------------------------------------------------------------------------
case "${PROJECT_TYPE}" in

    drupal7|drupal6)
	drush --root=/home/beta/projects/${PROJECT_NAME}/web cache-clear all
	drush --root=/home/${USER}/projects/${PROJECT_NAME}/web cache-clear all
        ;;

    *)
        echo "Error - Invalid project type."
        exit 1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Removing sudo permissions..."
# -------------------------------------------------------------------------------------------------
sudo -k

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished - the developer copy of the site is at http://${USER}-pr-${PROJECT_NAME}.${SERVER_FQDN}"
# -------------------------------------------------------------------------------------------------

exit 0
