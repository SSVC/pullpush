#!/bin/bash
#===================================================================================
#
# FILE: pulldevfrombeta
#
# USAGE: pulldevfrombeta [project type]
#
# DESCRIPTION: This will pull a copy of a beta site to a dev copy.
#
# OPTIONS: see function ’usage’ below
# NOTES: ---
# AUTHOR: Kevin Bailey, kbailey@freewayprojects.com
# COMPANY: Freeway Projects Limited
#===================================================================================

# -------------------------------------------------------------------------------------------------
# Set up global variables.
#
# We are going to explicitly set the script name variable.  Obviously the script name is available
# as $0 - but this is not consistent and may or may not contain the path.  Also, this means we can
# use the bash debugger without needing to handle the fact that $0 would contain something like
# 'bashdb'.
# -------------------------------------------------------------------------------------------------
SCRIPT_NAME=pushinitialsitetobeta
DATE_TIME=$(date +%Y%m%d-%H%M%S)

# -------------------------------------------------------------------------------------------------
# Set up the user to be able to run sudo commands - this will be revoked at the end of the script.
# -------------------------------------------------------------------------------------------------
sudo -v

# -------------------------------------------------------------------------------------------------
# Log all output from the script.
# 
# As we are going to be carrying out multiple steps and it is important we can see all the output
# to be able to diagnose problems.
# -------------------------------------------------------------------------------------------------

# Create a place for the log files.
sudo mkdir -p /var/log/pullpush
sudo chmod 777 /var/log/pullpush

# Create a pipe...
tmppipe=$(mktemp -u)
mkfifo ${tmppipe}

# ...then start a tee process which takes as its input the pipe - and output to the logfile (and 
# standard output) and then push the tee process into the background (subshell).
tee < ${tmppipe} /var/log/pullpush/${DATE_TIME}_${USER}_${SCRIPT_NAME}.log &

# Redirect both standard output and standard error to the pipe just created - these outputs
# will then be directed via the pipe to standard output (the current shell) and the log file.
exec &> ${tmppipe}

# This sets up the pipe to be removed - it will only be fully dropped when no process is using it.
rm ${tmppipe}

# -------------------------------------------------------------------------------------------------
# Import Pullpush functions.
# -------------------------------------------------------------------------------------------------
source /usr/local/share/pullpush/pullpush_functions

# -------------------------------------------------------------------------------------------------
# Local functions
#
# Here we will define all the functions used by this script.
# -------------------------------------------------------------------------------------------------

# Output a usage message - used when the parameters input are not correct.
usage () {
    echo "Usage: $SCRIPT_NAME -p [project name]"
}

check_beta_files_into_svn () {

    # -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Checking the status of the beta files and then committing them to SVN..."
    # -------------------------------------------------------------------------------------------------
    # As part of the first step in getting the dev copy up-to-date with the latest beta is to get all 
    # beta files checked into SVN

    # First of all we are going to copy the database dump into the code repository so that the whole site is in the repository.
##    cp /home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.sql /home/beta/projects/${PROJECT_NAME}/web/sites/default/files/${PROJECT_NAME}.sql

    # The only file changes this should pick up are the new data files which are in sites/default/files.  First we are 
    # going to output the changes to files/ and / and make sure they match.  If they don't match then there are non-data
    # files/directories which have been changed in the Drupal part of the site which needs to be looked into

    # NB - The output from the status commands needs to be sorted as lines are not always output in the same order.
    echo "Checking the status of the files..."
    beta_svn_status_of_whole_site=$(svn -u status /home/beta/projects/${PROJECT_NAME}/web | sort)
    beta_svn_status_of_files_directory=$(svn -u status /home/beta/projects/${PROJECT_NAME}/web/sites/default/files | sort)

    echo "beta_svn_status_of_whole_site: ${beta_svn_status_of_whole_site}"
    echo "beta_svn_status_of_files_directory: ${beta_svn_status_of_files_directory}"

    if [ "$beta_svn_status_of_whole_site" != "$beta_svn_status_of_files_directory" ]
    then
	echo "The beta site files has files which have been modified which are not in the files/ directory - this needs to be looked into as only data files should be updated on the beta site."
	exit 1
    fi

    # Now checking that the revision number of beta's local svn copy matches the repository.  If they don't match then the repository must have been 
    # updated by another process.  We would need to see where that update come from and what (if any) database changes were made.
    # file changes to SVN.
    beta_local_revision=$(svn info /home/beta/projects/${PROJECT_NAME}/web | grep '^Revision:' | sed s/^Revision:[[:space:]]*// )

    # Trying to get revision without authentication details.
    ####remote_revision=$(svn --username kevinb --password xxxxxxxx info http://svn.chalfont.ssvc.com/Technology/Websites/radio-v2 | grep '^Revision:' | awk '{print $2}')
    remote_revision=$(svn info http://localhost/svn/${PROJECT_NAME} | grep '^Revision:' | awk '{print $2}')

    echo "beta_local_revision: ${beta_local_revision}"
    echo "remote_revision: ${remote_revision}"

    if [ "$beta_local_revision" != "$remote_revision" ]
    then
	echo "The revision number of the local copy does not match the remote respository version - this needs to be looked into - someone/some process has updated the repository which needs to be checked - also, check for any database changes?"
	exit 1
    fi

    echo "Committing all the beta files to SVN..."

    # We've finished the checks - now lets commit the changes to beta files/ to the repository.  We will first svn add/delete 
    # files as necessary.

    # NB - We could run the 'svn status' on just the files directory - but this should not be necessary as the previous checks are supposed to 
    # check that only file/dirs in files/ have changed.  We'll leave the 'svn status' to pick up all changes because at least the site will
    # be an exact copy of beta and the output on the command line will show all file changes.

    echo "Adding all new files to svn control list..."
    ## ssh beta@localhost "svn status ${BETA_DOCUMENT_ROOT} | grep \"^?\" | sed s/^?// | sed s/[[:space:]]*// | xargs -i svn add \"{}\"" 
    ###    sudo -u beta sh -c "svn status /home/beta/projects/${PROJECT_NAME}/web | grep \"^?\" | sed s/^?// | sed s/[[:space:]]*// | xargs -i svn add \"{}\"" 
    sudo -u beta -i "svn status /home/beta/projects/${PROJECT_NAME}/web | grep \"^?\" | sed s/^?// | sed s/[[:space:]]*// | xargs -i svn add \"{}\"" 

    echo "If files have been deleted then SVN needs to mark them for deletion..."
    ## ssh beta@localhost "svn status ${BETA_DOCUMENT_ROOT} | grep \"^\!\" | sed s/^\!// | sed s/[[:space:]]*// | xargs -i svn delete \"{}\""
    ###    sudo -u beta sh -c "svn status /home/beta/projects/${PROJECT_NAME}/web | grep \"^\!\" | sed s/^\!// | sed s/[[:space:]]*// | xargs -i svn delete \"{}\""
    sudo -u beta -i "svn status /home/beta/projects/${PROJECT_NAME}/web | grep \"^\!\" | sed s/^\!// | sed s/[[:space:]]*// | xargs -i svn delete \"{}\""

    echo "Committing and deleting the files which have changed in the beta files/ directory..."
    ##ssh beta@localhost "svn commit -m \"$DATE_TIME - Committing added/changed/deleted data files from beta into repository.\" ${BETA_DOCUMENT_ROOT} "
    ###    sudo -u beta sh -c "svn commit -m \"${DATE_TIME} - Committing added/changed/deleted data files from beta into repository.\" /home/beta/projects/${PROJECT_NAME}/web "
    sudo -u beta -i "svn commit -m \"${DATE_TIME} - Committing added/changed/deleted data files from beta into repository.\" /home/beta/projects/${PROJECT_NAME}/web "

    # Now we will run an update - the reason for this is so the revision number of beta local and
    # the repository will match and can therefore be tested before running the next commit from beta.
    # I.e. After running this update the revision numbers match.  When running the next test before 
    # committing the beta files/ changes we can check the revision numbers and if they don't match then 
    # the repository must have been updated by another process.  This would then need to be investigated.
    echo "SVN update the local beta copy to get the revision number to match the repository revision..."
    ##ssh beta@localhost "svn update ${BETA_DOCUMENT_ROOT}"
    sudo -u beta -i "svn update /home/beta/projects/${PROJECT_NAME}/web"

    # Here we will get the latest revision number and save a copy of the database dump file with that
    # revision number so it can be matched up to the code in the repository.
    echo "Creating a database copy with the matching revision number..."
    new_beta_revision=$(svn info /home/beta/projects/${PROJECT_NAME}/web | grep '^Revision:' | sed s/^Revision:[[:space:]]*// )
    sudo -u beta -i "mkdir -p /home/beta/backups"
    sudo -u beta -i "cp /home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.sql /home/beta/backups/${PROJECT_NAME}_r${new_beta_revision}.sql"
}

# -------------------------------------------------------------------------------------------------
# Testing parameters
# -------------------------------------------------------------------------------------------------
while getopts ":p:" opt; do
    case $opt in
	p)
	    PROJECT_NAME=$OPTARG
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	    exit 1
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    exit 1
	    ;;
    esac
done

# Check all parameters have had values assigned.
if [ -z $PROJECT_NAME ]
then
    echo "The project name needs to be set."
    usage
    exit 1
fi

# Check the project exists.
if [ ! -e /home/beta/projects/${PROJECT_NAME}/web ]
then
    echo "The project does not appear to exist."
    usage
    exit 1
fi

# Load the project settings file or display an error if it does not exist.
if [ -e /etc/pullpush/projects/${PROJECT_NAME}.conf ]
then
    source /etc/pullpush/projects/${PROJECT_NAME}.conf
else
    echo "ERROR - The project settings file /etc/pullpush/projects/${PROJECT_NAME}.conf not found."
    exit 1
fi

# Load the configuration file and check it was loaded OK.
__load_configuration_file

if [ $? -ne 0 ]
then
    echo "Configuration file was not loaded."
fi

echo "All tests completed OK."

echo "Project name: ${PROJECT_NAME}"

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Make backup copy of the beta site database..."
# -------------------------------------------------------------------------------------------------
mkdir -p /home/${USER}/backups/beta_sites
mysqldump betapr${PROJECT_NAME} > /home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.sql
##tar --create --file=/home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.tar /home/beta/projects/${PROJECT_NAME}/web

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Checking if the dev site exists - if not then it will be created as a copy of beta ..."
# -------------------------------------------------------------------------------------------------
if [ ! -e /home/${USER}/projects/${PROJECT_NAME}/web ]
then
    # In this block we are going to:
    # 1. Check beta files into SVN
    # 
    # 1. Create a DB for the dev site.
    # 2. Load the database from the beta database backup.
    # 3. Checkout files from SVN.
    # 4. Update settings.php with the database settings.
    # 5. Set up vhost

    echo "The dev site does not exist so it is being created..."

    echo "Checking the beta site files into SVN..."
    check_beta_files_into_svn

    echo "Creating database..."
    DATABASE_NAME=${USER}pr${PROJECT_NAME}
    DATABASE_USER=${USER}pr${PROJECT_NAME}
    DATABASE_PASSWORD=`cat /dev/urandom | base64 | tr -d '[:punct:]' | tr -d '[:digit:]' | tr -d '[:upper:]' | cut -c1-10 | head -1`
    __create_mysql_database_and_user_account ${DATABASE_NAME} ${DATABASE_USER} ${DATABASE_PASSWORD}

    echo "Loading the database from the beta database backup..."
    mysql ${USER}pr${PROJECT_NAME} < /home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.sql

    echo "Checking out the files from SVN to the new dev site..."
    svn checkout http://localhost/svn/${PROJECT_NAME} /home/${USER}/projects/${PROJECT_NAME}/web

    if [ "${WEB_SERVER_TYPE}" = "apache2prefork" ]
    then
	echo
	echo `date`
	echo "Add the www-data user to the developers group so that the web server can write to the files/ directory..."
	sudo adduser --quiet www-data ${USER}

	echo
	echo `date`
	echo "Setting permissions for the files/ directory so the web server can write to it..."
	sudo chmod -R 775 /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/files
    fi
    
    echo "Update settings.php with the database settings..."
    # NB - We are going to base the settings file on default.settings.php.  Any modifications to the 
    # settings.php file which are not database settings should be applied to the default.settings.php
    # file so that other developers get the same base settings.php.
    cp /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/default.settings.php /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/settings.php

    case "${PROJECT_TYPE}" in

	drupal7)

	    cat <<EOFSETTINGS >> /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/settings.php

\$databases = array (
  'default' => 
  array (
    'default' => 
    array (
      'database' => '${DATABASE_NAME}',
      'username' => '${DATABASE_USER}',
      'password' => '${DATABASE_PASSWORD}',
      'host' => 'localhost',
      'port' => '',
      'driver' => 'mysql',
      'prefix' => '',
    ),
  ),
);

EOFSETTINGS

	    ;;

	drupal6)

	    echo "\$db_url = 'mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME}';" >> /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/settings.php
	    ;;

	*)
            echo "Error - Invalid project type."
            exit 1
    esac

    echo "Setting up the vhost..."
    __set_up_vhost ${USER}-pr-${PROJECT_NAME} /home/${USER}/projects/${PROJECT_NAME}/web

else
    echo "The dev copy of the site already exists so we will update it..."

    # Before first we will check beta files into SVN.
    # First we will revert the files.
    # Then we will update the files from the repository.
    # Then we will overwrite the developer database with the beta database.
    
    echo "Checking the beta site files into SVN..."
    check_beta_files_into_svn

    echo "Reverting the current dev files to to latest revision in the SVN repository..."
    # Todo - Maybe here we can clear out any cache/temp files.
    # Todo - Maybe before reverting we could maybe rename modified files.

    # Here we are going to revert all local files so we can update from SVN without conflicts.

    # NB - RE deleted directories
    # 'svn revert' will not revert deleted directories - but if there are any deleted directories then
    # they should show up in the 'svn status' output check which is run next.  They should show if they 
    # were deleted using rmdir or via 'svn delete'.
    svn revert --recursive /home/${USER}/projects/${PROJECT_NAME}/web

    # We are going to check the current svn status of the local dev repository.
    # Due to the revert command which has just been run there sould be no modified files.

    # Here we are removing any extra files.  Errors may be caused if users have added files to beta which
    # have the same name as any files which are being added by the developer - so it is necessary to remove
    # the files from the developers copy before pulling down the new beta files.
    svn status /home/${USER}/projects/${PROJECT_NAME}/web | grep "^?" | sed s/^?// | sed s/[[:space:]]*// | xargs -r rm -r

    # The --quiet option tells 'svn status' to not output names of files which are not under
    # version control.
    dev_svn_status=$(svn --quiet status /home/${USER}/projects/${PROJECT_NAME}/web)

    # If there was any output then we want to stop the script so the user can check changes.
    if [ -n "$dev_svn_status" ]
    then
	echo "There are modified files/directories in your dev version which have not been reverted - run 'svn status' and check the modified files."
	exit 0
    fi

    #####  HERE HERE HERE - check in the latest beta files - if they are not already checked in.


    # -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Checkout latest SVN files to dev..."
    # -------------------------------------------------------------------------------------------------
    # This gets the dev files to be a match for what is in the repository which has just been updated 
    # with the files from beta.  There may be some local files which are not in SVN and certain other
    # files such as settings.php and some cache files which may be different on local as well.
    svn update /home/${USER}/projects/${PROJECT_NAME}/web

    # SVN pulls the files out with standard ownership and permissions - for Apache Prefork we need
    # to set the permissions to allow the web server to work with the files/ directory.
    if [ "${WEB_SERVER_TYPE}" = "apache2prefork" ]
    then
	echo
	echo `date`
	echo "Add the www-data user to the developers group so that the web server can write to the files/ directory..."
	sudo adduser --quiet www-data ${USER}

	echo
	echo `date`
	echo "Setting permissions for the files/ directory so the web server can write to it..."
	sudo chmod -R 775 /home/${USER}/projects/${PROJECT_NAME}/web/sites/default/files
    fi

    echo "Copy beta database on to dev..."
    mysqladmin --force drop ${USER}pr${PROJECT_NAME}
    mysqladmin create ${USER}pr${PROJECT_NAME}
    mysql ${USER}pr${PROJECT_NAME} < /home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.sql

fi

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Removing sudo permissions..."
# -------------------------------------------------------------------------------------------------
sudo -k

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished - the developer copy of the site is at http://${USER}-pr-${PROJECT_NAME}.${SERVER_FQDN}..."
# -------------------------------------------------------------------------------------------------

exit 0

