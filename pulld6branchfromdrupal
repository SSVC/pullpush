#!/bin/bash

# pulld6fromdrupal
# Pull Drupal 6 branch from Drupal

# -------------------------------------------------------------------------------------------------
# Script which will make the current dev copy of a website a copy of the current beta version.
# -------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
# Logging setup
# -------------------------------------------------------------------------------------------------

# These lines have been copied from http://stackoverflow.com/questions/3173131/redirect-copy-of-stdout-to-log-file-from-within-bash-script-itself
# and will send the script output to a log file.
mkdir -p ~/logs/pullpush
DATE_TIME=`date +%Y%m%d-%H%M%S`
logfile=~/logs/pullpush/pulld6fromdrupal_${DATE_TIME}.log
mkfifo ${logfile}.pipe
tee < ${logfile}.pipe $logfile &
exec &> ${logfile}.pipe
rm ${logfile}.pipe

# -------------------------------------------------------------------------------------------------
# We are going to bring in a parameter which will be used to pull in a file containing values for
# variables - this is to prevent users accidentally using someone elses databases and web space.
# -------------------------------------------------------------------------------------------------

echo
echo `date`
echo "Testing for arguments..."
if [ $1 ]
then
    echo "Project name supplied OK as $1"
    echo
else
    echo "ERROR - No project name supplied"
    exit -1
fi

if [ $2 ]
then
    echo "Branch name supplied OK as $2"
    echo
else
    echo "ERROR - No branch name supplied"
    exit -1
fi

# Check the variables file exists.
if [ -e ~/.pullpush/${1} ]
then
        source ~/.pullpush/$1
else
        echo "ERROR - Configuration file $1 not found."
        exit -1
fi

# Check the global settings file exists.
if [ -e /home/pullpush/.pullpush/projects/${1} ]
then
        source /home/pullpush/.pullpush/projects/${1}
else
        echo "ERROR - Global configuration file $1 not found."
        exit -1
fi


# NB - Here we need to check the branch name is short and that
# it is unique.

DATE_TIME=`date +%Y%m%d-%H%M%S`
PROJECT_NAME=${1}
BRANCH_NAME=${2}

# Should possibly use a better tool - but SLES does not have gpw or pwgen available.
# NB - We need to generate a shortish username to log in to the database as MySQL
# has a limit on database usernames of 16 characters.
# NB - It would be good to put hyphens inbetween the parts of the database name but 
# this causes problems with MySQL.
DATABASE_NAME=${USER}${PROJECT_NAME}${BRANCH_NAME}
DATABASE_USER=`cat /dev/urandom | base64 | tr -d '[:punct:]' | tr -d '[:digit:]' | tr -d '[:upper:]' | cut -c1-10 | head -1`
DATABASE_PASSWORD=`cat /dev/urandom | base64 | tr -d '[:punct:]' | tr -d '[:digit:]' | tr -d '[:upper:]' | cut -c1-10 | head -1`

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Download Drupal..."
# -------------------------------------------------------------------------------------------------

# We do this first to make sure the document root exists - otherwise the 'rcapache2 restart' command
# will produce a warning.
mkdir -p ~/projects/${PROJECT_NAME}/branches
cd ~/projects/${PROJECT_NAME}/branches
drush dl drupal-6 --drupal-project-rename=${BRANCH_NAME}

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Create web space for the branch site..."
# -------------------------------------------------------------------------------------------------

sudo cp /etc/apache2/vhosts.d/vhost-drupal.template /etc/apache2/vhosts.d/${USER}-${PROJECT_NAME}-${BRANCH_NAME}.dev3.conf

# Modify the template file.
sudo sed -i "s/username/${USER}/g" /etc/apache2/vhosts.d/${USER}-${PROJECT_NAME}-${BRANCH_NAME}.dev3.conf
sudo sed -i "s/projectname/${PROJECT_NAME}/g" /etc/apache2/vhosts.d/${USER}-${PROJECT_NAME}-${BRANCH_NAME}.dev3.conf
sudo sed -i "s/branchname/${BRANCH_NAME}/g" /etc/apache2/vhosts.d/${USER}-${PROJECT_NAME}-${BRANCH_NAME}.dev3.conf
sudo /usr/sbin/rcapache2 restart

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Create the database for the site..."
# -------------------------------------------------------------------------------------------------

# We will create a database for the Drupal site.  Then, we need to allow the user full access to this database as standard 
# privileges required by Drupal do not seem to allow us the create the initial tables.  We will then change privileges
# to only those needed for Drupal.
# NB - It is possible to run the 'drush site-install' command and specify the root user for MySQL - but this would expose the
# MYSQL root user and password to anyone who can read this script - and this might include user accounts which are not in the 
# wheel group.

sudo mysqladmin create ${DATABASE_NAME}
sudo mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Carry out a site install to set up the new site..."
# -------------------------------------------------------------------------------------------------

cd ~/projects/${PROJECT_NAME}/branches
drush dl drupal-6 --drupal-project-rename=${BRANCH_NAME}

cd ~/projects/${PROJECT_NAME}/branches/${BRANCH_NAME}

# For D6 the profile should be 'default' and under D7 the profile should be 'standard'.
drush site-install default --db-url=mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME} --yes

# Now we've allowed the user to set up the Drupal site we're going to reduce the user
# down to only the rights which they need to run Drupal.  We do this by revoking all 
# rights and then only allowing the required rights.

sudo mysql --execute="REVOKE ALL PRIVILEGES, GRANT OPTION FROM '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
sudo mysql --execute="GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}

echo "This is the URL for your new website:"
echo ${USER}-${PROJECT_NAME}-${BRANCH_NAME}.dev3

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Change permissions on the files directory to enable the web server to write to it..."
# -------------------------------------------------------------------------------------------------
sudo chmod 777 -R ~/projects/${PROJECT_NAME}/branches/${BRANCH_NAME}/sites/default/files

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished."
# -------------------------------------------------------------------------------------------------

exit 0

