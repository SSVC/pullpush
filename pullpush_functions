#!/bin/bash
#===================================================================================
#
# FILE: pullpush_functions
#
# DESCRIPTION: This file will contain functions used by the Pullpush scripts.
#
# AUTHOR: Kevin Bailey, kbailey@freewayprojects.com
# COMPANY: Freeway Projects Limited
#===================================================================================

# Check the Pullpush configuration file exists.
__load_configuration_file () {

    if [ -e /etc/pullpush/pullpush.conf ]
    then
	source /etc/pullpush/pullpush.conf
	return 0
    else
	echo "ERROR - Pullpush configuration file not found."
	return 1
    fi
}

# Create a standard MySQL database and a user account which is set with all privileges
# to the database.
__create_mysql_database_and_user_account () {

    DATABASE_NAME=${1}
    DATABASE_USER=${2}
    DATABASE_PASSWORD=${3}

    case "${PROJECT_TYPE}" in
	
	drupal6|drupal7)

	    mysqladmin create ${DATABASE_NAME}
	    mysql --execute="GRANT ALL ON ${DATABASE_NAME}.* TO '${DATABASE_USER}'@'localhost' IDENTIFIED BY '${DATABASE_PASSWORD}';" ${DATABASE_NAME}
            ;;

	*)
            echo "Error - Invalid project type."
            exit -1
    esac
}

# Set up an Apache vhost with configuration from template files.
__set_up_vhost () {

    VHOST_NAME=${1}
    DOC_ROOT=${2}

    case "${SERVER_TYPE}" in

	debian|ubuntu)

	# First we need to copy the relevant vhost template file.
	    case ${PROJECT_TYPE} in
		drupal6|drupal7)
		    sudo cp /usr/local/share/pullpush/vhost_drupal.template /etc/apache2/sites-available/${VHOST_NAME}
                    ;;
		*)
		    echo "Error - Invalid project type."
		    exit -1
            esac

	    # Edit the configuration file.  There may be a better way to do this.
            sudo sed -i "s|documentroot|${DOC_ROOT}|g" /etc/apache2/sites-available/${VHOST_NAME}
            sudo sed -i "s/username/${USER}/g" /etc/apache2/sites-available/${VHOST_NAME}
            sudo sed -i "s/vhostname/${VHOST_NAME}/g" /etc/apache2/sites-available/${VHOST_NAME}
            sudo sed -i "s/serverfqdn/${SERVER_FQDN}/g" /etc/apache2/sites-available/${VHOST_NAME}
            sudo sed -i "s/serveradminemail/${SERVER_ADMIN_EMAIL}/g" /etc/apache2/sites-available/${VHOST_NAME}

            sudo a2ensite ${VHOST_NAME}
            sudo apache2ctl restart
            ;;

	*)
            echo "Error - Invalid server type."
            exit -1
    esac

}

__check_beta_files_into_svn () {

    # -------------------------------------------------------------------------------------------------
    echo
    echo `date`
    echo "Checking the status of the beta files and then committing them to SVN..."
    # -------------------------------------------------------------------------------------------------
    # As part of the first step in getting the dev copy up-to-date with the latest beta is to get all 
    # beta files checked into SVN

    # First of all we are going to copy the database dump into the code repository so that the whole site is in the repository.
##    cp /home/${USER}/backups/beta_sites/${PROJECT_NAME}_${DATE_TIME}.sql /home/beta/projects/${PROJECT_NAME}/web/sites/default/files/${PROJECT_NAME}.sql

    # The only file changes this should pick up are the new data files which are in sites/default/files.  First we are 
    # going to output the changes to files/ and / and make sure they match.  If they don't match then there are non-data
    # files/directories which have been changed in the Drupal part of the site which needs to be looked into

    # NB - The output from the status commands needs to be sorted as lines are not always output in the same order.
    echo "Checking the status of the files..."
    beta_svn_status_of_whole_site=$(svn -u status /home/beta/projects/${PROJECT_NAME}/web | sort)
    beta_svn_status_of_files_directory=$(svn -u status /home/beta/projects/${PROJECT_NAME}/web/sites/default/files | sort)

    echo "beta_svn_status_of_whole_site: ${beta_svn_status_of_whole_site}"
    echo "beta_svn_status_of_files_directory: ${beta_svn_status_of_files_directory}"

    if [ "$beta_svn_status_of_whole_site" != "$beta_svn_status_of_files_directory" ]
    then
	echo "The beta site files has files which have been modified which are not in the files/ directory - this needs to be looked into as only data files should be updated on the beta site."
	exit 1
    fi

    # Now checking that the revision number of beta's local svn copy matches the repository.  If they don't match then the repository must have been 
    # updated by another process.  We would need to see where that update come from and what (if any) database changes were made.
    # file changes to SVN.
    beta_local_revision=$(svn info /home/beta/projects/${PROJECT_NAME}/web | grep '^Revision:' | sed s/^Revision:[[:space:]]*// )

    # Trying to get revision without authentication details.
    ####remote_revision=$(svn --username kevinb --password xxxxxxxx info http://svn.chalfont.ssvc.com/Technology/Websites/radio-v2 | grep '^Revision:' | awk '{print $2}')
    remote_revision=$(svn info http://localhost/svn/${PROJECT_NAME} | grep '^Revision:' | awk '{print $2}')

    echo "beta_local_revision: ${beta_local_revision}"
    echo "remote_revision: ${remote_revision}"

    if [ "$beta_local_revision" != "$remote_revision" ]
    then
	echo "The revision number of the local copy does not match the remote respository version - this needs to be looked into - someone/some process has updated the repository which needs to be checked - also, check for any database changes?"
	exit 1
    fi

    # We've finished the checks - now lets commit the changes to beta files/ to the repository.  We will first svn add/delete 
    # files as necessary.

    # NB - We could run the 'svn status' on just the files directory - but this should not be necessary as the previous checks are supposed to 
    # check that only file/dirs in files/ have changed.  We'll leave the 'svn status' to pick up all changes because at least the site will
    # be an exact copy of beta and the output on the command line will show all file changes.

    echo "Adding all new files to svn control list..."
    ## ssh beta@localhost "svn status ${BETA_DOCUMENT_ROOT} | grep \"^?\" | sed s/^?// | sed s/[[:space:]]*// | xargs -i svn add \"{}\"" 
    ###    sudo -u beta sh -c "svn status /home/beta/projects/${PROJECT_NAME}/web | grep \"^?\" | sed s/^?// | sed s/[[:space:]]*// | xargs -i svn add \"{}\"" 
    sudo -u beta -i "svn status /home/beta/projects/${PROJECT_NAME}/web | grep \"^?\" | sed s/^?// | sed s/[[:space:]]*// | xargs -i svn add \"{}\"" 

    echo "If files have been deleted then SVN needs to mark them for deletion..."
    ## ssh beta@localhost "svn status ${BETA_DOCUMENT_ROOT} | grep \"^\!\" | sed s/^\!// | sed s/[[:space:]]*// | xargs -i svn delete \"{}\""
    ###    sudo -u beta sh -c "svn status /home/beta/projects/${PROJECT_NAME}/web | grep \"^\!\" | sed s/^\!// | sed s/[[:space:]]*// | xargs -i svn delete \"{}\""
    sudo -u beta -i "svn status /home/beta/projects/${PROJECT_NAME}/web | grep \"^\!\" | sed s/^\!// | sed s/[[:space:]]*// | xargs -i svn delete \"{}\""

    echo "Committing and deleting the files which have changed in the beta files/ directory..."
    ##ssh beta@localhost "svn commit -m \"$DATE_TIME - Committing added/changed/deleted data files from beta into repository.\" ${BETA_DOCUMENT_ROOT} "
    ###    sudo -u beta sh -c "svn commit -m \"${DATE_TIME} - Committing added/changed/deleted data files from beta into repository.\" /home/beta/projects/${PROJECT_NAME}/web "
    sudo -u beta -i "svn commit -m \"${DATE_TIME} - Committing added/changed/deleted data files from beta into repository.\" /home/beta/projects/${PROJECT_NAME}/web "

    # Now we will run an update - the reason for this is so the revision number of beta local and
    # the repository will match and can therefore be tested before running the next commit from beta.
    # I.e. After running this update the revision numbers match.  When running the next test before 
    # committing the beta files/ changes we can check the revision numbers and if they don't match then 
    # the repository must have been updated by another process.  This would then need to be investigated.

    # With SVN the local revision number is not updated after a commit - this is need by Pullpush as
    # checks are carried out later.
    echo "SVN update the local beta copy to get the revision number to match the repository revision..."
    ##ssh beta@localhost "svn update ${BETA_DOCUMENT_ROOT}"
    sudo -u beta -i "svn update /home/beta/projects/${PROJECT_NAME}/web"

    # Here we will get the latest revision number and save a copy of the database dump file with that
    # revision number so it can be matched up to the code in the repository.
    echo "Creating a database copy with the matching revision number..."
    new_beta_revision=$(svn info /home/beta/projects/${PROJECT_NAME}/web | grep '^Revision:' | sed s/^Revision:[[:space:]]*// )
    sudo -u beta -i "mkdir -p /home/beta/backups"
    sudo -u beta -i "cp /home/${USER}/backups/beta_sites/${PROJECT_NAME}.sql /home/beta/backups/${PROJECT_NAME}_r${new_beta_revision}.sql"
}
