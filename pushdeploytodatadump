#!/bin/bash
#===================================================================================
#
# FILE: pushdeploytodatadump
#
# USAGE: pushdeploytodatadump -p [project type]
#
# DESCRIPTION: This will push a copy of the deploy site into data dump files.
#
# OPTIONS: see function ’usage’ below
# NOTES: ---
# AUTHOR: Kevin Bailey, kbailey@freewayprojects.com
# COMPANY: Freeway Projects Limited
#===================================================================================

# Make sure only one Pullpush script is running at any one time.
touch /var/lock/pullpush
chmod --quiet 666 /var/lock/pullpush
exec 9>/var/lock/pullpush
if ! flock -n 9  ; then
   echo "Another Pullpush script is currently running - try again later.";
   exit 1
fi

# -------------------------------------------------------------------------------------------------
# Set up global variables.
#
# We are going to explicitly set the script name variable.  Obviously the script name is available
# as $0 - but this is not consistent and may or may not contain the path.  Also, this means we can
# use the bash debugger without needing to handle the fact that $0 would contain something like
# 'bashdb'.
# -------------------------------------------------------------------------------------------------
SCRIPT_NAME=pushdeploytodatadump
DATE_TIME=$(date +%Y%m%d-%H%M%S)

# -------------------------------------------------------------------------------------------------
# Set up the user to be able to run sudo commands - this will be revoked at the end of the script.
# -------------------------------------------------------------------------------------------------
sudo -v

# -------------------------------------------------------------------------------------------------
# Log all output from the script.
# 
# As we are going to be carrying out multiple steps and it is important we can see all the output
# to be able to diagnose problems.
# -------------------------------------------------------------------------------------------------

# Create a place for the log files.
sudo mkdir -p /var/log/pullpush
sudo chmod 777 /var/log/pullpush

# Create a pipe...
tmppipe=$(mktemp -u)
mkfifo ${tmppipe}

# ...then start a tee process which takes as its input the pipe - and output to the logfile (and 
# standard output) and then push the tee process into the background (subshell).
tee < ${tmppipe} /var/log/pullpush/${DATE_TIME}_${USER}_${SCRIPT_NAME}.log &

# Redirect both standard output and standard error to the pipe just created - these outputs
# will then be directed via the pipe to standard output (the current shell) and the log file.
exec &> ${tmppipe}

# This sets up the pipe to be removed - it will only be fully dropped when no process is using it.
rm ${tmppipe}

# -------------------------------------------------------------------------------------------------
# Import Pullpush functions.
# -------------------------------------------------------------------------------------------------
source /usr/local/share/pullpush/pullpush_functions

# -------------------------------------------------------------------------------------------------
# Local functions
#
# Here we will define all the functions used by this script.
# -------------------------------------------------------------------------------------------------

# Output a usage message - used when the parameters input are not correct.
usage () {
    echo "Usage: $SCRIPT_NAME -p [project name]"
}

# -------------------------------------------------------------------------------------------------
# Testing parameters
# -------------------------------------------------------------------------------------------------
while getopts ":p:" opt; do
    case $opt in
	p)
	    PROJECT_NAME=$OPTARG
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	    exit 1
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    exit 1
	    ;;
    esac
done

# Check the parameter has had a value assigned.
if [ -z $PROJECT_NAME ]
then
    echo "The project name needs to be set."
    usage
    exit 1
fi

# Check the project exists.
if [ ! -e /home/beta/projects/${PROJECT_NAME}/web ]
then
    echo "The project does not appear to exist."
    usage
    exit 1
fi

# Load the project settings file or display an error if it does not exist.
if [ -e /etc/pullpush/projects/${PROJECT_NAME}.conf ]
then
    source /etc/pullpush/projects/${PROJECT_NAME}.conf
else
    echo "ERROR - The project settings file /etc/pullpush/projects/${PROJECT_NAME}.conf not found."
    exit 1
fi

# Load the configuration file and check it was loaded OK.
__load_configuration_file

if [ $? -ne 0 ]
then
    echo "Configuration file was not loaded."
fi

echo "All tests completed OK."
echo "Project name: ${PROJECT_NAME}"

# -------------------------------------------------------------------------------------------------
# The plan.
#
# Put site into maintenance mode.
# Clear caches on deploy site.
# Dump out DB.
# -------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Putting the site into maintenance mode..."
# -------------------------------------------------------------------------------------------------
case "${PROJECT_TYPE}" in

    drupal7)

	echo "Setting the deploy site to maintenance mode..."
	drush -r /home/beta/projects/${PROJECT_NAME}/web vset maintenance_mode 1 --yes
        ;;

    drupal6)

	echo "Setting the deploy site to maintenance mode..."
	drush -r /home/beta/projects/${PROJECT_NAME}/web vset site_offline 1 --yes
        ;;

    *)
        echo "Error - Invalid project type."
        exit 1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Clearing out the caches on the site to trim the database and files/ before making the data dump..."
# -------------------------------------------------------------------------------------------------

# Bear in mind here that we may need to chmod the /files directory to 777 if we are not using Apache-ITK.
# Clear out the caches on the deploy site.
case "${PROJECT_TYPE}" in

    drupal7|drupal6)

	echo "Setting the deploy site to maintenance mode..."
	sudo -u deploy -i sh -c "drush --root=/home/deploy/projects/${PROJECT_NAME}/web cache-clear all"
        ;;

    *)
        echo "Error - Invalid project type."
        exit 1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Dumping out the database to a file..."
# -------------------------------------------------------------------------------------------------
sudo -u deploy -i sh -c "mkdir -p /home/deploy/projects/${PROJECT_NAME}/deploy_dumps"
###sudo -u deploy -i sh -c "mkdir -p /home/deploy/projects/${PROJECT_NAME}/db"
sudo -u deploy -i sh -c "mysqldump deploypr${PROJECT_NAME} > /home/deploy/projects/${PROJECT_NAME}/deploy_dumps/database_dump.sql"

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Creating a tar file of all the files in the site..."
# -------------------------------------------------------------------------------------------------

# The -C switch will 'cd' into the directory - this means we can create an archive which only
# contains a single directory and therefore there will be a strip-components value of 1 needed.
sudo -u deploy -i sh -c "mkdir -p /home/deploy/projects/${PROJECT_NAME}/deploy_dumps"
sudo -u deploy -i sh -c "rm /home/deploy/projects/${PROJECT_NAME}/deploy_dumps/site_files.tar"
sudo -u deploy -i sh -c "rm /home/deploy/projects/${PROJECT_NAME}/deploy_dumps/site_files.tar.gz"
sudo -u deploy -i sh -c "tar --create --file=/home/deploy/projects/${PROJECT_NAME}/deploy_dumps/site_files.tar -C /home/deploy/projects/${PROJECT_NAME}/ web"
sudo -u deploy -i sh -c "gzip -f /home/deploy/projects/${PROJECT_NAME}/deploy_dumps/site_files.tar"

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished..."
# -------------------------------------------------------------------------------------------------

exit 0
