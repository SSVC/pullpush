#!/bin/bash
#===================================================================================
#
# FILE: pushinitialsitetobeta
#
# USAGE: pushinitialsitetobeta [project type] [initial site name] [project name]
#
# DESCRIPTION: This will take an initial site and create a beta site from it.
#
# OPTIONS: see function ’usage’ below
# NOTES: ---
# AUTHOR: Kevin Bailey, kbailey@freewayprojects.com
# COMPANY: Freeway Projects Limited
#===================================================================================

# -------------------------------------------------------------------------------------------------
# Set up global variables.
#
# We are going to explicitly set the script name variable.  Obviously the script name is available
# as $0 - but this is not consistent and may or may not contain the path.  Also, this means we can
# use the bash debugger without needing to handle the fact that $0 would contain something like
# 'bashdb'.
# -------------------------------------------------------------------------------------------------
SCRIPT_NAME=pushinitialsitetobeta
DATE_TIME=$(date +%Y%m%d-%H%M%S)

# -------------------------------------------------------------------------------------------------
# Set up the user to be able to run sudo commands - this will be revoked at the end of the script.
# -------------------------------------------------------------------------------------------------
sudo -v

# -------------------------------------------------------------------------------------------------
# Log all output from the script.
# 
# As we are going to be carrying out multiple steps and it is important we can see all the output
# to be able to diagnose problems.
# -------------------------------------------------------------------------------------------------

# Create a place for the log files.
sudo mkdir -p /var/log/pullpush
sudo chmod 777 /var/log/pullpush

# Create a pipe...
tmppipe=$(mktemp -u)
mkfifo ${tmppipe}

# ...then start a tee process which takes as its input the pipe - and output to the logfile (and 
# standard output) and then push the tee process into the background (subshell).
tee < ${tmppipe} /var/log/pullpush/${DATE_TIME}_${USER}_${SCRIPT_NAME}.log &

# Redirect both standard output and standard error to the pipe just created - these outputs
# will then be directed via the pipe to standard output (the current shell) and the log file.
exec &> ${tmppipe}

# This sets up the pipe to be removed - it will only be fully dropped when no process is using it.
rm ${tmppipe}

# -------------------------------------------------------------------------------------------------
# Import Pullpush functions.
# -------------------------------------------------------------------------------------------------
source /usr/local/share/pullpush/pullpush_functions

# -------------------------------------------------------------------------------------------------
# Local functions
#
# Here we will define all the functions used by this script.
# -------------------------------------------------------------------------------------------------

# Output a usage message - used when the parameters input are not correct.
usage () {
    echo "Usage: $SCRIPT_NAME -t [project type] -i [initial site name] -p [project name (1 to 6 alphanumeric characters)]"
}

# -------------------------------------------------------------------------------------------------
# Testing parameters
# -------------------------------------------------------------------------------------------------
while getopts ":t:i:p:" opt; do
    case $opt in
	t)
	    PROJECT_TYPE=$OPTARG
	    ;;
	i)
	    INITIAL_SITE_NAME=$OPTARG
	    ;;
	p)
	    PROJECT_NAME=$OPTARG
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	    exit 1
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    exit 1
	    ;;
    esac
done

# Check all parameters have had values assigned.
if [ -z $PROJECT_TYPE ] || [ -z $INITIAL_SITE_NAME ] || [ -z $PROJECT_NAME ]
then
    echo "The project type, the initial site name and the project name need to be set."
    usage
    exit 1
fi

# Check that the project type is valid.
if [ $PROJECT_TYPE != "drupal7" ] && [ $PROJECT_TYPE != "drupal6" ] 
then
    echo "The currently supported project types are 'drupal7' and drupal6."
    exit 1
fi

# Check that the project name is valid.
if [ ${#PROJECT_NAME} -gt 6 ]; then
    echo "The project name should be no longer than 6 characters."
    usage
    exit 1
fi

# Check that only alphanumeric characters are used for the project name.
compressed="$(echo ${PROJECT_NAME} | sed -e 's/[^[:alnum:]]//g')"
if [ "$compressed" != "${PROJECT_NAME}" ] ; then
    echo "The project name should only contain alphanumeric characters."
    usage
    exit 1
fi

if [ -e /home/beta/projects/${PROJECT_NAME} ]
then
    echo "The project name has been used already - choose a different project name."
    usage
    exit 1
fi

# Check the initial site exists.
if [ ! -e /home/${USER}/initial_sites/${INITIAL_SITE_NAME} ]
then
    echo "The initial site does not appear to exist."
    usage
    exit 1
fi

# Load the configuration file and check it was loaded OK.
__load_configuration_file

if [ $? -ne 0 ]
then
    echo "Configuration file was not loaded."
fi

echo "All tests completed OK."

echo "Project name: ${PROJECT_TYPE}"
echo "Initial site name: ${INITIAL_SITE_NAME}"
echo "Project name: ${PROJECT_NAME}"

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Make backup copy of the initial site..."
# -------------------------------------------------------------------------------------------------
mkdir -p ~/backups/initial_sites
sudo mysqldump ${USER}is${INITIAL_SITE_NAME} > /home/${USER}/backups/initial_sites/${USER}is${INITIAL_SITE_NAME}_${DATE_TIME}.sql
tar --create --file=/home/${USER}/backups/initial_sites/${USER}is${INITIAL_SITE_NAME}_${DATE_TIME}.tar /home/${USER}/initial_sites/${INITIAL_SITE_NAME}/web

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Creating the database for the beta site and loading the initial database into it..."
# -------------------------------------------------------------------------------------------------

DATABASE_NAME=betapr${PROJECT_NAME}
DATABASE_USER=betapr${PROJECT_NAME}
DATABASE_PASSWORD=`cat /dev/urandom | base64 | tr -d '[:punct:]' | tr -d '[:digit:]' | tr -d '[:upper:]' | cut -c1-10 | head -1`
__create_mysql_database_and_user_account ${DATABASE_NAME} ${DATABASE_USER} ${DATABASE_PASSWORD}

mysql betapr${PROJECT_NAME} < /home/${USER}/backups/initial_sites/${USER}is${INITIAL_SITE_NAME}_${DATE_TIME}.sql

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Creating the Subversion repository for this project and import the initial files..."
# -------------------------------------------------------------------------------------------------
sudo svnadmin create /var/lib/svn/${PROJECT_NAME}

# We will set the ownership to www-data as we will primarily be using HTTP to access the archive.
sudo chown -R www-data:www-data /var/lib/svn/${PROJECT_NAME}

# Here we will put a dump of the database into the code repository.  This means that the site can
# be rebuilt from an export from the repository if needed.
cp /home/${USER}/backups/initial_sites/${USER}is${INITIAL_SITE_NAME}_${DATE_TIME}.sql /home/${USER}/initial_sites/${INITIAL_SITE_NAME}/web/${USER}is${INITIAL_SITE_NAME}_${DATE_TIME}.sql

svn import /home/${USER}/initial_sites/${INITIAL_SITE_NAME}/web http://localhost/svn/${PROJECT_NAME} -m "Initial import."

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Checkout the files from SVN ..."
# -------------------------------------------------------------------------------------------------

case "${PROJECT_TYPE}" in

    drupal7|drupal6)

        # Pull the files from the repository and remove the settings.php from SVN control.
	sudo -u beta -i svn checkout http://localhost/svn/${PROJECT_NAME} /home/beta/projects/${PROJECT_NAME}/web
	sudo -u beta -i svn delete --keep-local /home/beta/projects/${PROJECT_NAME}/web/sites/default/settings.php
	sudo -u beta -i svn propset svn:ignore settings.php /home/beta/projects/${PROJECT_NAME}/web/sites/default
	sudo -u beta -i "svn commit -m \"Remove the settings.php file from SVN control to prevent incorrect database connections.\" /home/beta/projects/${PROJECT_NAME}/web"

	if [ "${WEB_SERVER_TYPE}" = "apache2prefork" ]
	then
	    echo
	    echo `date`
	    echo "Add the www-data user to the beta group so that the web server can write to the files/ directory..."
	    sudo adduser --quiet www-data beta

	    echo
	    echo `date`
	    echo "Setting permissions for the files/ directory so the web server can write to it..."
	    sudo chmod -R 775 /home/beta/projects/${PROJECT_NAME}/web/sites/default/files
	fi
        ;;

    *)
        echo "Error - Invalid project type."
        exit -1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Update the settings.php file with the new database connections..."
# -------------------------------------------------------------------------------------------------

case "${PROJECT_TYPE}" in

    drupal7)

	# We will cpoy the file before changing it as changing it in place gets complicated when trying to excape the sudo command.
	cp /home/beta/projects/${PROJECT_NAME}/web/sites/default/settings.php /home/${USER}/settings.php.betapr${PROJECT_NAME}
	cat <<EOFSETTINGS >> /home/${USER}/settings.php.betapr${PROJECT_NAME}

\$databases = array (
  'default' => 
  array (
    'default' => 
    array (
      'database' => '${DATABASE_NAME}',
      'username' => '${DATABASE_USER}',
      'password' => '${DATABASE_PASSWORD}',
      'host' => 'localhost',
      'port' => '',
      'driver' => 'mysql',
      'prefix' => '',
    ),
  ),
);

EOFSETTINGS

	sudo -u beta -i cp /home/${USER}/settings.php.betapr${PROJECT_NAME} /home/beta/projects/${PROJECT_NAME}/web/sites/default/settings.php
	rm /home/${USER}/settings.php.betapr${PROJECT_NAME}
	;;

    drupal6)

	# We will cpoy the file before changing it as changing it in place gets complicated when trying to excape the sudo command.
	cp /home/beta/projects/${PROJECT_NAME}/web/sites/default/settings.php /home/${USER}/settings.php.betapr${PROJECT_NAME}
##	echo "\$db_url = 'mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME}'" >> /home/${USER}/settings.php.betapr${PROJECT_NAME}
	echo "\$db_url = 'mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost/${DATABASE_NAME}';" >> /home/${USER}/settings.php.betapr${PROJECT_NAME}
	sudo -u beta -i cp /home/${USER}/settings.php.betapr${PROJECT_NAME} /home/beta/projects/${PROJECT_NAME}/web/sites/default/settings.php
	rm /home/${USER}/settings.php.betapr${PROJECT_NAME}
	;;

    *)
        echo "Error - Invalid project type."
        exit -1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Here we need to set up the configuration file at /etc/pullpush/projects/<project_name>..."
# -------------------------------------------------------------------------------------------------

sudo mkdir -p /etc/pullpush/projects

case "${PROJECT_TYPE}" in

    drupal7)
	sudo sh -c "echo PROJECT_TYPE=drupal7 >> /etc/pullpush/projects/${PROJECT_NAME}.conf"
	;;

    drupal6)
	sudo sh -c "echo PROJECT_TYPE=drupal6 >> /etc/pullpush/projects/${PROJECT_NAME}.conf"
	;;

    *)
	echo "Error - Invalid project type."
	exit -1
esac

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Set up the beta vhost..."
# -------------------------------------------------------------------------------------------------

# If the projects directory does not exist yet then we need to create it.
## NB - this should have been created already.
##if [ ! -e /home/beta/projects ]
##then
##    sudo mkdir /home/beta/projects
##    sudo chown beta:beta /home/beta/projects
##fi

__set_up_vhost beta-pr-${PROJECT_NAME} /home/beta/projects/${PROJECT_NAME}/web


# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Removing sudo permissions..."
# -------------------------------------------------------------------------------------------------
sudo -k

# -------------------------------------------------------------------------------------------------
echo
echo `date`
echo "Finished - the new site is at http://beta-pr-${PROJECT_NAME}.${SERVER_FQDN}..."
# -------------------------------------------------------------------------------------------------

exit 0


